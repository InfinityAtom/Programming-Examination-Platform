@using Programming_Examination_Platform.Services
@using Programming_Examination_Platform.Model
@using System.ComponentModel.DataAnnotations
@using System.Security.Cryptography
@using System.Text
@inject NavigationManager NavManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject StudentService StudentService
@inject ISnackbar Snackbar

<MudDialog DisableBackdropClick="true" FullWidth="true">
    <DialogContent>
        <MudText Typo="Typo.h6">Please enter your password to proceed:</MudText>
        <MudTextField Label="Password" @bind-Value="@_password" InputType="InputType.Password" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Password" AdornmentColor="Color.Primary"></MudTextField>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="VerifyPassword" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CheckCircle">Verify</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    private string _password;

    private async System.Threading.Tasks.Task VerifyPassword()
    {
        try
        {
            // Get the logged in user's email from LocalStorage
            var userEmail = await LocalStorage.GetItemAsync<string>("userEmail");
            
            if (string.IsNullOrEmpty(userEmail))
            {
                Snackbar.Add("User is not logged in or email is missing.", Severity.Error);
                return;
            }

            // Fetch the student details using the email
            var student = await StudentService.GetStudentByEmail(userEmail);
            
            if (student != null)
            {
                // Compute the SHA256 hash of the entered password
                string hashedPassword = ComputeSha256Hash(_password);
                
                // Verify the entered password against the stored hashed password
                if (student.Password == hashedPassword)
                {
                    Snackbar.Add("Password verified successfully!", Severity.Success);
                    MudDialog.Close(DialogResult.Ok(true));
                    // Redirect to the desired page after successful verification
                    NavManager.NavigateTo("/edit-profile");
                }
                else
                {
                    Snackbar.Add("Incorrect password. Please try again.", Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("User not found.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
    }

    // Method to compute SHA256 hash
    private static string ComputeSha256Hash(string rawData)
    {
        using (SHA256 sha256Hash = SHA256.Create())
        {
            byte[] bytes = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(rawData));
            StringBuilder builder = new StringBuilder();
            for (int i = 0; i < bytes.Length; i++)
            {
                builder.Append(bytes[i].ToString("x2"));
            }
            return builder.ToString();
        }
    }
}
