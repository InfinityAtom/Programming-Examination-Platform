@page "/scoreboard"
@using Programming_Examination_Platform.Services
@using Task = System.Threading.Tasks.Task
@using Programming_Examination_Platform.Model
@using Microsoft.EntityFrameworkCore.Infrastructure
@inject NavigationManager NavManager;
@inject IDialogService DialogService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject StudentService StudentService
@inject IJSRuntime JSRuntime
<PageTitle>Results</PageTitle>

<MudLayout>
  <MudAppBar Color="Color.Primary" Fixed="true" Elevation="0">
           <!-- Left Section: Back Button, Menu Button, Logo, and Page Title -->
           <div style="display: flex; align-items: center;">
               <!-- Back Button -->
               <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Inherit" OnClick="@GoBack" />
               
               <!-- Menu Button -->
               <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" OnClick="@ToggleDrawer" />
       
               <!-- Logo and Page Title -->
               <div style="display: flex; align-items: center; margin-left: 10px;">
                   <img src="images/header.png" alt="Logo" style="max-height: 50px; max-width: 201px; margin-right: 30px;" />
                   <MudText Typo="Typo.h6" Color="Color.Inherit">Scoreboard</MudText>
               </div>
           </div>
       
           <!-- Right Section: Spacer, Account Icon, User Email, and Settings Icon -->
           <div style="display: flex; align-items: center; margin-left: auto;">
               <!-- Account Icon -->
               <MudIconButton Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Inherit" />
               
               <!-- User Email -->
               <MudText Typo="Typo.h6" Class="ml-2" Color="Color.Inherit">@userEmail</MudText>
               
               <!-- Settings Icon -->
               <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Inherit" />
           </div>
       </MudAppBar>

  <MudDrawer @bind-Open="@open" Elevation="0">
    <MudNavMenu>
      <MudText Typo="Typo.h6" Class="px-4">Programming Examination Platform</MudText>
      <MudText Typo="Typo.body2" Class="px-4 mud-text-secondary">Student Account</MudText>
      <MudDivider Class="my-2"/>
      <MudNavLink Href="/indexStudent" Icon="@Icons.Material.Filled.Dashboard">Dashboard</MudNavLink>
      <MudNavLink Href="/booking/selectexam" Icon="@Icons.Material.Filled.CalendarMonth">Booking</MudNavLink>
      <MudNavLink Href="/results" Icon="@Icons.Material.Filled.LibraryAddCheck">Results</MudNavLink>
      <MudNavLink Href="/scoreboard" Icon="@Icons.Material.Filled.SupervisedUserCircle">Scoreboard</MudNavLink>
      <MudNavGroup Title="Tutorials" Icon="@Icons.Material.Filled.Settings" Expanded="true">
        <MudNavLink Href="/tutorials/javaexam" Icon="@Icons.Material.Filled.Airplay" IconColor="Color.Success">JavaExam</MudNavLink>
      </MudNavGroup>
      <MudDivider Class="my-2"/>
      <MudNavLink OnClick="OnLogoutButtonClick" Icon="@Icons.Material.Filled.Logout" IconColor="Color.Error">Log Out</MudNavLink>
    </MudNavMenu>
  </MudDrawer>
  <MudMainContent Class="pt-16 px-16">
    <MudContainer Class="mt-6">
      <br/>
      <br/>
      <style>
.center
{
      margin: auto;
      width: 80%;
      padding: 20px;
}     
</style>
      <div class="center">
        <div class="center">
          <MudText Typo="Typo.h2" Align="Align.Center">Final scoreboard</MudText>
          <br/><br/>
          <MudSimpleTable Style="overflow-x: auto;">
            <thead>
            <tr>
              <th>PLACE</th>
              <th>First Name</th>
              <th>Last Name</th>
              <th>Email</th>
              <th>Final Grade</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var student in sortedStudents)
            {
              @if (student.Email == userEmail)
              {
                <tr bgcolor="yellow">
                  <td>@student.Place</td>
                  <td>@student.FirstName</td>
                  <td>@student.LastName</td>
                  <td>@student.Email</td>
                  <td>@student.FinalGrade</td>
                </tr>
              }
              else
              {
                <tr>
                  <td>@student.Place</td>
                  <td>@student.FirstName</td>
                  <td>@student.LastName</td>
                  <td>@student.Email</td>
                  <td>@student.FinalGrade</td>
                </tr>
              }
            }
            </tbody>
          </MudSimpleTable>
        </div>
      </div>
      <br/><br/><br/><br/><br/><br/><br/><br/><br/>
    </MudContainer>
  </MudMainContent>
</MudLayout>

@code{
  bool open = false;

  void ToggleDrawer()
  {
    open = !open;
  }
  private int userID;
  private string userEmail;
  private List<StudentWithGrade> sortedStudents = new List<StudentWithGrade>(); // Declare the sortedStudents list
  private string _userRole;

  protected override async Task OnInitializedAsync()
  {
    userID = await LocalStorage.GetItemAsync<int>("userID");
    _userRole = await LocalStorage.GetItemAsync<string>("userRole");

  // Check if user is a student or if no role is set.
    if (string.IsNullOrEmpty(_userRole) || _userRole == "Admin")
    {
      NavManager.NavigateTo("/loginStudent");
      return;
    }
    if (userID == -1) // or another value that represents "no ID"
    {
      NavManager.NavigateTo("/loginStudent");
      return;
    }
    var student = await StudentService.GetStudentById(userID);
    userEmail = student?.Email ?? "Email not found";
    var studentTasks = await StudentService.GetStudentsWithTasksAboveGrade(4);
    int place = 1;
    foreach (var studentTask in studentTasks.OrderByDescending(s => s.FinalGrade))
    {
      sortedStudents.Add(new StudentWithGrade
      {
        Place = place++,
        FirstName = studentTask.Student.FirstName,
        LastName = studentTask.Student.LastName,
        Email = studentTask.Student.Email,
        FinalGrade = studentTask.FinalGrade ?? 0
      });
    }
  }

  private async Task OnLogoutButtonClick()
  {
    await LocalStorage.SetItemAsync("userID", -1);
    NavManager.NavigateTo("/loginStudent");
  }
  private async Task GoBack()
  {
  // Call the JavaScript function to go back
    await JSRuntime.InvokeVoidAsync("goBack");
  }
  private class StudentWithGrade
  {
    public int Place { get; set; }
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public string Email { get; set; }
    public int FinalGrade { get; set; }
  }

}