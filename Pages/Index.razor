@page "/indexStudent"
@using Programming_Examination_Platform.Services
@inject NavigationManager NavManager;
@inject IDialogService DialogService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject StudentService StudentService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
<PageTitle>Dashboard</PageTitle>
<MudLayout>
 <MudAppBar Color="Color.Primary" Fixed="true" Elevation="0">
     <!-- Left Section: Back Button, Menu Button, Logo, and Page Title -->
     <div style="display: flex; align-items: center;">
         <!-- Back Button -->
         <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Inherit" OnClick="@GoBack" />
         
         <!-- Menu Button -->
         <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" OnClick="@ToggleDrawer" />
 
         <!-- Logo and Page Title -->
         <div style="display: flex; align-items: center; margin-left: 10px;">
             <img src="images/header.png" alt="Logo" style="max-height: 50px; max-width: 201px; margin-right: 30px;" />
             <MudText Typo="Typo.h6" Color="Color.Inherit">Dashboard</MudText>
         </div>
     </div>
 
     <!-- Right Section: Spacer, Account Icon, User Email, and Settings Icon -->
     <div style="display: flex; align-items: center; margin-left: auto;">
         <!-- Account Icon -->
         <MudIconButton Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Inherit" />
         
         <!-- User Email -->
         <MudText Typo="Typo.h6" Class="ml-2" Color="Color.Inherit">@_UserEmail</MudText>
         
         <!-- Settings Icon -->
         <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Inherit" />
     </div>
 </MudAppBar>

  <MudDrawer @bind-Open="@_Open" Elevation="0">
    <MudNavMenu>
      <MudText Typo="Typo.h6" Class="px-4">Programming Examination Platform</MudText>
      <MudText Typo="Typo.body2" Class="px-4 mud-text-secondary">Student Account</MudText>
      <MudDivider Class="my-2"/>
      <MudNavLink Href="/indexStudent" Icon="@Icons.Material.Filled.Dashboard">Dashboard</MudNavLink>
      <MudNavLink Href="/booking/selectexam" Icon="@Icons.Material.Filled.CalendarMonth">Exam Booking</MudNavLink>
      <MudNavLink Href="/results" Icon="@Icons.Material.Filled.LibraryAddCheck">Exam Results</MudNavLink>
      <MudNavLink Href="/scoreboard" Icon="@Icons.Material.Filled.SupervisedUserCircle">Leaderboard</MudNavLink>
      <MudNavGroup Title="Tutorials" Icon="@Icons.Material.Filled.Settings" Expanded="true">
        <MudNavLink Href="/tutorials/javaexam" Icon="@Icons.Material.Filled.Airplay" IconColor="Color.Success">JavaExam Tutorials</MudNavLink>
      </MudNavGroup>
      <MudDivider Class="my-2"/>
      <MudNavLink Href="/profile" Icon="@Icons.Material.Filled.AccountCircle">View Profile</MudNavLink>
      <MudNavLink OnClick="OnLogoutButtonClick" Icon="@Icons.Material.Filled.Logout" IconColor="Color.Error">Log Out</MudNavLink>
    </MudNavMenu>
  </MudDrawer>
  <MudMainContent Class="pt-16 px-16">
    <MudContainer Class="mt-6">
      @if (_IsLoading)
      {
        <MudText Typo="Typo.h2">Dashboard</MudText>
        <br/>
        <p>Loading, please wait...</p>
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7"/>
      }
      else
      {
        <MudText Typo="Typo.h2">Dashboard</MudText>
        <br/>
        <MudGrid Spacing="3">
          <MudItem xs="12" md="4">
            <MudCard Class="equal-height">
                <MudCardHeader>
                    <MudText Typo="Typo.h5">Exam Booking:</MudText>
                    @if (_CheckIfHasBookedExam)
                    {
                        <MudChip Color="Color.Primary" Class="ml-auto">@_DaysTillExam days left</MudChip>
                    }
                </MudCardHeader>
                <MudCardContent>
                    <MudText>Exam: <strong>@_SelectedExam</strong></MudText>
                    <MudText>Date:</MudText>
                    <MudText Typo="Typo.h3">
                        <strong>@_SelectedDate</strong>
                    </MudText>
                    @* Add the delete button here *@
                    @if (_CheckIfHasBookedExam)
                    {
                      <br/>
                        <MudButton OnClick="@OpenDeleteBookingDialog" Disabled="@(_FinalGrade != DefaultFinalGradeText)" Variant="Variant.Outlined" Color="Color.Error">
                            Delete Booking
                        </MudButton>
                    }
                </MudCardContent>
            </MudCard>
          </MudItem>
          <MudItem xs="12" md="4">
            <MudCard Class="equal-height">
              <MudCardHeader>
                <MudText Typo="Typo.h5">Grade:</MudText>
              </MudCardHeader>
              <MudCardContent>
                <MudText>Exam: <strong>@_SelectedExam</strong></MudText>
                <MudText>Your Grade:</MudText>
                <MudText Typo="Typo.h3">
                  <strong>@_FinalGrade</strong>
                </MudText>
              </MudCardContent>
            </MudCard>
          </MudItem>
          <MudItem xs="12" md="4">
            <MudCard Class="equal-height">
              <MudCardHeader>
                <MudText Typo="Typo.h5">Status:</MudText>
                @if (_StudentStatus == "Succeeded")
                {
                  <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Class="ml-auto"/>
                }
                @if (_StudentStatus == "Failed")
                {
                  <MudIcon Icon="@Icons.Material.Filled.Error" Color="Color.Error" Class="ml-auto"/>
                }
                @if (_StudentStatus == "No Status")
                {
                  <MudIcon Icon="@Icons.Material.Filled.QuestionMark" Color="Color.Info" Class="ml-auto"/>
                }
              </MudCardHeader>
              <MudCardContent>
                <MudText>Exam: <strong>@_SelectedExam</strong></MudText>
                <MudText>Status:</MudText>
                <MudText Typo="Typo.h3" Color="@(_StudentStatus == "Succeeded" ? Color.Success : _StudentStatus == "Failed" ? Color.Error : Color.Info)">
                  <strong>@_StudentStatus</strong>
                </MudText>
              </MudCardContent>
            </MudCard>
          </MudItem>
        </MudGrid>
        <br/><br/><br/>
        <MudText Typo="Typo.h3">Study</MudText>
        <br/>
        <MudGrid Spacing="2">
          <MudItem xs="12" md="4">
            <MudCard Class="equal-height">
              <MudCardMedia Image="images/study.png" Class="card-media-img"  Height="250">
              </MudCardMedia>
              <MudCardContent>
                <MudText Typo="Typo.h5">Study Materials</MudText>
                <MudText Typo="Typo.body2">Study and prepare for the big day. Here youțll find a lot of useful resources</MudText>
              </MudCardContent>
              <MudCardActions>
                <MudButton Href="/study/" Variant="Variant.Text" Color="Color.Primary">START STUDYING</MudButton>
              </MudCardActions>
            </MudCard>
          </MudItem>
          <MudItem xs="12" md="4">
            <MudCard Class="equal-height">
              <MudCardMedia Image="images/simulator.png" Class="card-media-img"  Height="250">
              </MudCardMedia>
              <MudCardContent>
                <MudText Typo="Typo.h5">Exam simulation</MudText>
                <MudText Typo="Typo.body2">Before going to the actual exam, test yourself to know if you are well prepared</MudText>
              </MudCardContent>
              <MudCardActions>
                <MudButton Href="/simulator/" Variant="Variant.Text" Color="Color.Primary">Go to resource</MudButton>
              </MudCardActions>
            </MudCard>
          </MudItem>
        </MudGrid>
        <br/><br/><br/>
        <MudText Typo="Typo.h3">Exam Management</MudText>
        <br/>
        <MudGrid Spacing="3">
          <MudItem xs="12" md="4">
            <MudCard Class="equal-height">
              <MudCardMedia Image="images/exams.png" Class="card-media-img"  Height="250">
              </MudCardMedia>
              <MudCardContent>
                <MudText Typo="Typo.h5">Book an Exam</MudText>
                <MudText Typo="Typo.body2">Select the date that is most convenient for you to take your exam.</MudText>
              </MudCardContent>
              <MudCardActions>
                <MudButton Href="/booking/selectexam" Variant="Variant.Text" Color="Color.Primary">Book now</MudButton>
              </MudCardActions>
            </MudCard>
          </MudItem>
          <MudItem xs="12" md="4">
            <MudCard Class="equal-height">
              <MudCardMedia Image="images/results.png" Class="card-media-img" Height="250">
                
              </MudCardMedia>
              <MudCardContent>
                <MudText Typo="Typo.h5">Check Your Results</MudText>
                <MudText Typo="Typo.body2">Check your progress on the last exam taken. You can also see feedback for each requirement and even the archive with the classes written by you, for verification.</MudText></MudCardContent>
              <MudCardActions>
                <MudButton Href="/results" Variant="Variant.Text" Color="Color.Primary">See the results</MudButton>
              </MudCardActions>
            </MudCard>
          </MudItem>
          <MudItem xs="12" md="4">
            <MudCard Class="equal-height">
              <MudCardMedia Image="images/leaderboard.png" Class="card-media-img" Height="250">
                
              </MudCardMedia>
              <MudCardContent>
                <MudText Typo="Typo.h5">Check Your Position in the Ranking</MudText>
                <MudText Typo="Typo.body2">See where you rank among your colleagues. The tiebreaker will be taken after the final score and the time elapsed in the exam.</MudText></MudCardContent>
              <MudCardActions>
                <MudButton Href="/scoreboard" Variant="Variant.Text" Color="Color.Primary">See the ranking</MudButton>
              </MudCardActions>
            </MudCard>
          </MudItem>
        </MudGrid>
        <br/><br/><br/>
        <MudText Typo="Typo.h3">Software</MudText>
        <br/>
        <MudGrid Spacing="3">
          <MudItem xs="12" md="4">
            <MudCard Class="equal-height">
              <MudCardMedia Image="images/download_banner_ij.png" Class="card-media-img" Height="250">
              </MudCardMedia>
              <MudCardContent>
                <MudText Typo="Typo.h5">Download the Required IDE</MudText>
                <MudText Typo="Typo.body2">IntelliJ IDEA Ultimate. Log in with the University Account.</MudText>
              </MudCardContent>
              <MudCardActions>
                <MudButton @onclick="OpenDialog2" Variant="Variant.Text" Color="Color.Primary">Download</MudButton>
              </MudCardActions>
            </MudCard>
          </MudItem>
          <!-- Empty spaces to create the visual effect of three cards -->
          <MudItem xs="12" md="4">
            <div></div>
          </MudItem>
          <MudItem xs="12" md="4">
            <div></div>
          </MudItem>
        </MudGrid>
        <br/><br/><br/>
        <MudText Typo="Typo.h3">Exam Details</MudText>
        <br/>
        <MudGrid Spacing="3">
          <MudItem xs="12" md="4">
            <MudCard Class="equal-height">
              <MudCardMedia Image="images/video.png" Class="card-media-img" Height="250">
                
              </MudCardMedia>
              <MudCardContent>
                <MudText Typo="Typo.h5">Exam Demo</MudText>
                <MudText Typo="Typo.body2">A short exam demo and a tutorial on accessing the exam.</MudText></MudCardContent>
              <MudCardActions>
                <MudButton Href="https://youtu.be/jdK-X0iu9Zs" Variant="Variant.Text" Color="Color.Primary">YouTube Video</MudButton>
              </MudCardActions>
            </MudCard>
          </MudItem>
          <MudItem xs="12" md="4">
            <MudCard Class="equal-height">
              <MudCardMedia Image="images/tutorial.png" Class="card-media-img" Height="250">
              </MudCardMedia>
              <MudCardContent>
                <MudText Typo="Typo.h5">Exam Tutorials</MudText>
                <MudText Typo="Typo.body2">JavaExam: Information about the interface and the exam rules.</MudText></MudCardContent>
              <MudCardActions>
                <MudButton Href="/tutorials" Variant="Variant.Text" Color="Color.Primary">Exam Tutorials</MudButton>
              </MudCardActions>
            </MudCard>
          </MudItem>
          <!-- Empty space to create the visual effect of three cards -->
          <MudItem xs="12" md="4">
            <div></div>
          </MudItem>
        </MudGrid>
      }
    </MudContainer>
  </MudMainContent>
</MudLayout>
<br/><br/><br/><br/><br/><br/>
<style>
    .equal-height {
        height: 100%;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        border-radius: 10px;
    }

    .card-media-img {
        max-width: 100%;
        max-height: 100%;
        object-fit: cover;
    }

    .ml-auto {
        margin-left: auto;
    }
</style>

@code {
  
  //Constants:
  private const string LocalStorageUserId = "userID";
  private const string ExamNameIf1 = "Java Exam";
  private const string ExamNameIfAnythingElse = "Unknown Exam";
  private const string EmailError = "Email not found";
  private const string DateFormat = "dd.MM.yyyy";
  private const string DefaultIfNullInitialization = "-";
  private const string AddToTheEndOfTheGrade = ".00";
  private const string SucceededFinalStatusText = "Succeeded";
  private const string FailedFinalStatusText = "Failed";
  private const string DefaultFinalStatusText = "No Status";
  private const string DefaultFinalGradeText = "No Grade";
  private const string CssClassForDialogContext = "my-custom-class";
  private const string DialogTitle = "⚠️ Warning";
  private const string UserRoleKeyLocalStorage = "userRole";
  private const string UserRoleTypeAdmin = "Admin";
  private const string StudentLoginPage = "/loginStudent";

  //Variables:
  private bool _IsLoading = true;
  private int _UserID;
  private string _UserEmail;
  private string _SelectedExam;
  private string _SelectedDate;
  private bool _CheckIfHasBookedExam;
  private string _UserRole;
  private string _StudentStatus;
  public string _FinalGrade;
  private int _DaysTillExam;
  private bool _Open;
  private TimeSpan _TimeTillExam;
  private Model.Booking? _Booking;
  private Model.Studenti? _Student;
  private Model.Task? _Grade;
  private DialogOptions _Options;
  
  //Methods:
  void ToggleDrawer()
  {
    _Open = !_Open;
  }
  private async Task GoBack()
  {
  // Call the JavaScript function to go back
    var assertion = await JSRuntime.InvokeAsync<object>("goBack");
  }

  private async Task OpenDeleteBookingDialog()
  {
    var options = new DialogOptions
    {
      DisableBackdropClick = true, // Makes the dialog non-closable by clicking outside
      FullWidth = true, // Ensures the dialog is full width
      CloseButton = false, // Hides the close button
      MaxWidth = MaxWidth.Small // Sets the dialog's max width to small
    };

    var dialogResult = await DialogService.Show<DialogDeleteBooking>("Confirm Delete", options).Result;

    if (dialogResult.Cancelled)
      return;

    await DeleteBooking();
  }

  private async Task DeleteBooking()
  {
    if (_Booking != null)
    {
      bool success = await StudentService.DeleteBooking(_Booking.BookingId);
      if (success)
      {
        Snackbar.Add("Booking deleted successfully.", Severity.Success);
        _CheckIfHasBookedExam = false;
        _IsLoading = true;
        await StudentService.SendSorryEmail(_Student, "Java Exam");
        _IsLoading = false;
        StateHasChanged();
        NavManager.NavigateTo("/indexStudent", forceLoad: true); // Hard refresh
        
      }
      else
      {
        Snackbar.Add("Error deleting booking. Please try again.", Severity.Error);
      }
    }
  }
  
  protected override async Task OnInitializedAsync()
  {
    _IsLoading = true;
    try
    {
      _UserID = await LocalStorage.GetItemAsync<int>(LocalStorageUserId);
      _UserRole = await LocalStorage.GetItemAsync<string>(UserRoleKeyLocalStorage);
      if (string.IsNullOrEmpty(_UserRole) || _UserRole == UserRoleTypeAdmin)
      {
        NavManager.NavigateTo(StudentLoginPage);
        return;
      }
      if (_UserID == -1)
      {
        NavManager.NavigateTo(StudentLoginPage);
        return;
      }
      _Student = await StudentService.GetStudentById(_UserID);
      _UserEmail = _Student?.Email ?? EmailError;
      _Booking = await StudentService.GetBookingByUserId(_UserID);

      if (_Booking != null)
      {
        _CheckIfHasBookedExam = true;
        _SelectedExam = _Booking.ExamId == 1 ? ExamNameIf1 : ExamNameIfAnythingElse;
        _SelectedDate = _Booking.BookingDate.ToString(DateFormat);
        _TimeTillExam = DateTime.ParseExact(_SelectedDate, DateFormat, null) - DateTime.Now;
        _DaysTillExam = (int)_TimeTillExam.TotalDays + 1;
      }
      else
      {
        _CheckIfHasBookedExam = false;
        _SelectedExam = DefaultIfNullInitialization;
        _SelectedDate = DefaultIfNullInitialization;
      }
      _Grade = await StudentService.GetTaskByUserId(_UserID);

      if (_Grade != null)
      {
        _FinalGrade = _Grade.FinalGrade.ToString() + AddToTheEndOfTheGrade;
      }
      else
      {
        _FinalGrade = DefaultFinalGradeText;
      }

      _StudentStatus = _Grade switch
      {
        {FinalGrade: >= 5 } => SucceededFinalStatusText,
        {FinalGrade: < 5 } => FailedFinalStatusText,
        null => DefaultFinalStatusText,
        _ => _StudentStatus
      };
    }
    finally
    {
      _IsLoading = false;
    }
  }

  private async Task OnLogoutButtonClick()
  {
    await LocalStorage.SetItemAsync(LocalStorageUserId, -1);
    NavManager.NavigateTo(StudentLoginPage);
  }

  private void OpenDialog2()
  {
    _Options = new DialogOptions { ClassBackground = CssClassForDialogContext };
    DialogService.Show<DialogIJ>(DialogTitle, _Options);
  }

}