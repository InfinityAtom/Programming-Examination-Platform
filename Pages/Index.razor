@page "/indexStudent"
@using Programming_Examination_Platform.Services
@inject NavigationManager NavManager;
@inject IDialogService DialogService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject StudentService StudentService

<PageTitle>Dashboard</PageTitle>
<MudLayout>
  <MudAppBar Color="Color.Primary" Fixed="true" Elevation="0">
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer"/>
    <div style="padding: 10px; display: flex; align-items: center;">
      <img src="images/header.png" style="max-height: 50px; max-width: 201px;"/>
    </div>
    <MudSpacer/>
    <MudIconButton Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Inherit"/>
    <MudText Typo="Typo.h6">@_UserEmail</MudText>
  </MudAppBar>
  <MudDrawer @bind-Open="@_Open" Elevation="0">
    <MudNavMenu>
      <MudText Typo="Typo.h6" Class="px-4">Programming Examination Platform</MudText>
      <MudText Typo="Typo.body2" Class="px-4 mud-text-secondary">Student Account</MudText>
      <MudDivider Class="my-2"/>
      <MudNavLink Href="/indexStudent" Icon="@Icons.Material.Filled.Dashboard">Dashboard</MudNavLink>
      <MudNavLink Href="/booking/selectexam" Icon="@Icons.Material.Filled.CalendarMonth">Booking</MudNavLink>
      <MudNavLink Href="/results" Icon="@Icons.Material.Filled.LibraryAddCheck">Results</MudNavLink>
      <MudNavLink Href="/scoreboard" Icon="@Icons.Material.Filled.SupervisedUserCircle">Scoreboard</MudNavLink>
      <MudNavGroup Title="Tutorials" Icon="@Icons.Material.Filled.Settings" Expanded="true">
        <MudNavLink Href="/tutorials/javaexam" Icon="@Icons.Material.Filled.Airplay" IconColor="Color.Success">JavaExam</MudNavLink>
      </MudNavGroup>
      <MudDivider Class="my-2"/>
      <MudNavLink OnClick="OnLogoutButtonClick" Icon="@Icons.Material.Filled.Logout" IconColor="Color.Error">Log Out</MudNavLink>
    </MudNavMenu>
  </MudDrawer>
  <MudMainContent Class="pt-16 px-16">
    <MudContainer Class="mt-6">

      @if (_IsLoading)
      {
        <MudText Typo="Typo.h2">Dashboard</MudText>
        <br/>
        <p>Loading, please wait...</p>
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7"/>
      }
      else
      {
        <MudText Typo="Typo.h2">Dashboard</MudText>
        <br/>
        <br/>

        <MudStack Spacing="15" Row="true" Class="mobile-stack">
          <MudCard>
            <MudCardHeader>
              <CardHeaderContent>
                <MudText Typo="Typo.h5">Exam Booking:</MudText>
              </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
              @if (_CheckIfHasBookedExam)
              {
                <MudText>Exam: <strong> @_SelectedExam </strong> </MudText>
                <MudText>Date:</MudText>
                <MudText Typo="Typo.h3">
                  <strong>@_SelectedDate</strong>
                </MudText>
              }
              <MudCardActions>
                @if (_CheckIfHasBookedExam == false)
                {
                  <MudButton Variant="Variant.Filled" Color="Color.Success" Href="/Booking/selectexam">Book your exam now</MudButton>
                }
              </MudCardActions>
            </MudCardContent>
          </MudCard>
          <MudCard>
            <MudCardHeader>
              <CardHeaderContent>
                <MudText Typo="Typo.h5">Grade:</MudText>
              </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
              <MudText>Exam: <strong> @_SelectedExam </strong> </MudText>
              <MudText>Your Grade:</MudText>
              <MudText Typo="Typo.h3">
                <strong>@_FinalGrade &#8195; &#8195;</strong>
              </MudText>
            </MudCardContent>
          </MudCard>
          <MudCard>
            <MudCardHeader>
              <CardHeaderContent>
                <MudText Typo="Typo.h5">Status:</MudText>
              </CardHeaderContent>
              <CardHeaderActions>
                @if (_StudentStatus == "Succeeded")
                {
                  <MudIconButton Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success"/>
                }
                @if (_StudentStatus == "Failed")
                {
                  <MudIconButton Icon="@Icons.Material.Filled.Error" Color="Color.Error"/>
                }
                @if (_StudentStatus == "No Status")
                {
                  <MudIconButton Icon="@Icons.Material.Filled.QuestionMark" Color="Color.Info"/>
                }
              </CardHeaderActions>

            </MudCardHeader>
            <MudCardContent>
              <MudText>Exam: <strong> @_SelectedExam </strong> </MudText>
              <MudText>Status:</MudText>
              @if (_StudentStatus == "Succeeded")
              {
                <MudText Typo="Typo.h3" Color="Color.Success">
                  <strong>@_StudentStatus &#8195; &#8195;</strong>
                </MudText>
              }
              @if (_StudentStatus == "Failed")
              {
                <MudText Typo="Typo.h3" Color="Color.Error">
                  <strong>@_StudentStatus &#8195; &#8195;</strong>
                </MudText>
              }
              @if (_StudentStatus == "No Status")
              {
                <MudText Typo="Typo.h3" Color="Color.Info">
                  <strong>@_StudentStatus &#8195; &#8195;</strong>
                </MudText>
              }

            </MudCardContent>
          </MudCard>
        </MudStack>
        <br/>
        <br/>
        @if (_CheckIfHasBookedExam)
        {
          <MudText Typo="Typo.h3" Color="Color.Primary"><strong>@_DaysTillExam</strong> days left till your exam </MudText>
        }
      }
      <br/><br/>
      <MudText Typo="Typo.h3">Exam management</MudText>
      <br/>

      <MudStack Spacing="15" Row="true">
        <MudCard>
          <MudCardMedia Image="images/exams.png" Height="200"/>
          <MudCardContent>
            <MudText Typo="Typo.h5">Book an exam</MudText>
            <br/>
            <MudText Typo="Typo.body2">Select the date that is</MudText>
            <MudText Typo="Typo.body2">most convenient for you to take your exam.&#8195; &#8195; &#8195; &#8195; &#8195;</MudText>
            <br/><br/>
          </MudCardContent>
          <MudCardActions>
            <MudButton Href="/booking/selectexam" Variant="Variant.Text" Color="Color.Primary">Book now</MudButton>
          </MudCardActions>
        </MudCard>
        <MudCard>
          <MudCardMedia Image="images/results.png" Height="200"/>
          <MudCardContent>
            <MudText Typo="Typo.h5">Check your results</MudText>
            <br/>
            <MudText Typo="Typo.body2">Check your progress on the last exam taken</MudText>
            <MudText Typo="Typo.body2">From here you can also see the feedback for each requirement, </MudText>
            <MudText Typo="Typo.body2">even the archive with the classes written by you, for verification</MudText>
          </MudCardContent>
          <MudCardActions>
            <MudButton Href="/results" Variant="Variant.Text" Color="Color.Primary">See the results</MudButton>
          </MudCardActions>
        </MudCard>
        <MudCard>
          <MudCardMedia Image="images/leaderboard.png" Height="200"/>
          <MudCardContent>
            <MudText Typo="Typo.h5">Check your position in the ranking</MudText>
            <br/>
            <MudText Typo="Typo.body2">You can see from here, where you rank among your colleagues</MudText>
            <MudText Typo="Typo.body2">The tiebreaker will be taken after the final score, and the</MudText>
            <MudText Typo="Typo.body2">time elapsed in the exam.</MudText>
          </MudCardContent>
          <MudCardActions>
            <MudButton Href="/scoreboard" Variant="Variant.Text" Color="Color.Primary">See the ranking</MudButton>
          </MudCardActions>
        </MudCard>
      </MudStack>
      <br/><br/>
      <MudText Typo="Typo.h3">Software</MudText>
      <br/>
      <MudStack Spacing="15" Row="true">
        <MudCard>
          <MudCardMedia Image="images/download_banner_ij.png" Height="200"/>
          <MudCardContent>
            <MudText Typo="Typo.h5">Download the required IDE</MudText>
            <br/>
            <MudText Typo="Typo.body2">IntelliJ IDEA Ultimate </MudText>
            <MudText Typo="Typo.body2">LogIn with the University Account</MudText>
            <br/>
          </MudCardContent>
          <MudCardActions>
            <MudButton @onclick="OpenDialog2" Variant="Variant.Text" Color="Color.Primary">Download</MudButton>
          </MudCardActions>
        </MudCard>
      </MudStack>
      <br/><br/>
      <MudText Typo="Typo.h3">Exam details</MudText>
      <br/>
      <MudStack Spacing="15" Row="true">
        <MudCard>
          <MudCardMedia Image="images/video.png" Height="200"/>
          <MudCardContent>
            <MudText Typo="Typo.h5">Exam Demo</MudText>
            <br/>
            <MudText Typo="Typo.body2">A short exam demo and a short tutorial on </MudText>
            <MudText Typo="Typo.body2">accessing the exam</MudText>
            <br/>
          </MudCardContent>
          <MudCardActions>
            <MudButton Href="https://youtu.be/jdK-X0iu9Zs" Variant="Variant.Text" Color="Color.Primary">YouTube Video</MudButton>
          </MudCardActions>
        </MudCard>

        <MudCard>
          <MudCardMedia Image="images/tutorial.png" Height="200"/>
          <MudCardContent>
            <MudText Typo="Typo.h5">Exam Tutorials</MudText>
            <br/>
            <MudText Typo="Typo.body2">JavaExam </MudText>
            <MudText Typo="Typo.body2">Information about the interface and the exam rules</MudText>
            <br/>
          </MudCardContent>
          <MudCardActions>
            <MudButton Href="/tutorials" Variant="Variant.Text" Color="Color.Primary">Exam Tutorials</MudButton>
          </MudCardActions>
        </MudCard>
      </MudStack>
    </MudContainer>
  </MudMainContent>
</MudLayout>
<br/><br/>


@code {
  
  //Constants:
  private const string LocalStorageUserId = "userID";
  private const string ExamNameIf1 = "Java Exam";
  private const string ExamNameIfAnythingElse = "Unknown Exam";
  private const string EmailError = "Email not found";
  private const string DateFormat = "dd.MM.yyyy";
  private const string DefaultIfNullInitialization = "-";
  private const string AddToTheEndOfTheGrade = ".00";
  private const string SucceededFinalStatusText = "Succeeded";
  private const string FailedFinalStatusText = "Failed";
  private const string DefaultFinalStatusText = "No Status";
  private const string DefaultFinalGradeText = "No Grade";
  private const string CssClassForDialogContext = "my-custom-class";
  private const string DialogTitle = "⚠️ Warning";
  private const string UserRoleKeyLocalStorage = "userRole";
  private const string UserRoleTypeAdmin = "Admin";
  private const string StudentLoginPage = "/loginStudent";

  //Variables:
  private bool _IsLoading = true;
  private int _UserID;
  private string _UserEmail;
  private string _SelectedExam;
  private string _SelectedDate;
  private bool _CheckIfHasBookedExam;
  private string _UserRole;
  private string _StudentStatus;
  public string _FinalGrade;
  private int _DaysTillExam;
  private bool _Open;
  private TimeSpan _TimeTillExam;
  private Model.Booking? _Booking;
  private Model.Studenti? _Student;
  private Model.Task? _Grade;
  private DialogOptions _Options;
  
  //Methods:
  void ToggleDrawer()
  {
    _Open = !_Open;
  }

  protected override async Task OnInitializedAsync()
  {
    _IsLoading = true;
    try
    {
      _UserID = await LocalStorage.GetItemAsync<int>(LocalStorageUserId);
      _UserRole = await LocalStorage.GetItemAsync<string>(UserRoleKeyLocalStorage);
      if (string.IsNullOrEmpty(_UserRole) || _UserRole == UserRoleTypeAdmin)
      {
        NavManager.NavigateTo(StudentLoginPage);
        return;
      }
      if (_UserID == -1)
      {
        NavManager.NavigateTo(StudentLoginPage);
        return;
      }
      _Student = await StudentService.GetStudentById(_UserID);
      _UserEmail = _Student?.Email ?? EmailError;
      _Booking = await StudentService.GetBookingByUserId(_UserID);

      if (_Booking != null)
      {
        _CheckIfHasBookedExam = true;
        _SelectedExam = _Booking.ExamId == 1 ? ExamNameIf1 : ExamNameIfAnythingElse;
        _SelectedDate = _Booking.BookingDate.ToString(DateFormat);
        _TimeTillExam = DateTime.ParseExact(_SelectedDate, DateFormat, null) - DateTime.Now;
        _DaysTillExam = (int)_TimeTillExam.TotalDays;
      }
      else
      {
        _CheckIfHasBookedExam = false;
        _SelectedExam = DefaultIfNullInitialization;
        _SelectedDate = DefaultIfNullInitialization;
      }
      _Grade = await StudentService.GetTaskByUserId(_UserID);

      if (_Grade != null)
      {
        _FinalGrade = _Grade.FinalGrade.ToString() + AddToTheEndOfTheGrade;
      }
      else
      {
        _FinalGrade = DefaultFinalGradeText;
      }

      _StudentStatus = _Grade switch
      {
        {FinalGrade: >= 5 } => SucceededFinalStatusText,
        {FinalGrade: < 5 } => FailedFinalStatusText,
        null => DefaultFinalStatusText,
        _ => _StudentStatus
      };
    }
    finally
    {
      _IsLoading = false;
    }
  }

  private async Task OnLogoutButtonClick()
  {
    await LocalStorage.SetItemAsync(LocalStorageUserId, -1);
    NavManager.NavigateTo(StudentLoginPage);
  }

  private void OpenDialog2()
  {
    _Options = new DialogOptions { ClassBackground = CssClassForDialogContext };
    DialogService.Show<DialogIJ>(DialogTitle, _Options);
  }

}