@layout LoginLayout
@page "/loginStudent"
@using Microsoft.EntityFrameworkCore
@using Programming_Examination_Platform.Model
@using Task = System.Threading.Tasks.Task
@inject JavaExamContext DbContext
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject ISnackbar Snackbar
<style>
body
{
background: rgb(255,255,255);
background: radial-gradient(circle, rgba(89,74,226,1) 0%, rgba(0,32,96,0.22172619047619047) 100%);
}
.center
{
      margin: auto;
      width: 80%;
      padding: 20px;
}     
.loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(255, 255, 255, 0.8); /* White background with 70% opacity */
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    z-index: 1000; /* Ensure it's above other content */
}
</style>
<MudAppBar Color="Color.Primary" Fixed="true" Elevation="0">
    <div style="padding: 10px; display: flex; align-items: center;">
        <img src="images/header.png" style="max-height: 50px; max-width: 201px;"/>
    </div>
</MudAppBar>
<br/><br/><br/><br/><br/><br/><br/>
<MudStack Spacing="3" Row="true">
    @if (_isLoading)
    {
        <div class="loading-overlay">
            <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
            <MudText Typo="Typo.h5">Please wait while we are connecting you to PeP</MudText>
        </div>
    }
    <MudSpacer/>
    <MudCard>
        <MudCardMedia Image="images/loginBanner.png" Height="200"/>
        <MudCardContent>
            <MudText Typo="Typo.h5">Log In</MudText>
            <MudText Typo="Typo.caption">Enter your email and password below to log in to the system!</MudText>
            <MudTextField Label="Email" @bind-Value="_email" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AlternateEmail" AdornmentColor="Color.Primary"/>
            <MudTextField Label="Password" @bind-Value="_password" InputType="InputType.Password" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Password" AdornmentColor="Color.Primary"/>
        </MudCardContent>
        <MudCardActions>
            <MudButton OnClick="OnLoginButtonClick">Log In</MudButton>
            <MudNavLink Href="/register">Or create a new account</MudNavLink>
            <MudNavLink Href="/loginAdmin">Or log in as proctor</MudNavLink>
        </MudCardActions>
    </MudCard>
    <MudSpacer/>
</MudStack>
<br/><br/><br/>
@code {
    private string _email = "";
    private string _password = "";
    private string _message = "";  // Variable to hold messages to display
    private int _alert;
    private bool _isLoading = false;
    
    
    async Task HandleLogin()
    {
        try
        {
            // Increase the command timeout to 60 seconds.
            //DbContext.Database.SetCommandTimeout(60);

            var student = await DbContext.Studentis
              .AsNoTracking()
               .Where(s => s.Email.Equals(_email) && s.Password.Equals(_password))
                .FirstOrDefaultAsync();
                
            if (student != null)
            {
                await LocalStorage.SetItemAsync("userID", student.StudnetId);
                await LocalStorage.SetItemAsync("StudentsProctorId", student.ProctorId);
                await LocalStorage.SetItemAsync("userRole", "Student");
                Console.WriteLine($"Logged in user: {_email} with the ID: {student.StudnetId}" );
                _message = "Successfully logged in! Redirecting...";  // Set the message
                _alert = 0;
                NavigationManager.NavigateTo("/indexStudent");
                
            }
            else
            {
                _message = "User or password incorrect!";  // Set the message
                _alert = 1;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
            _message = "An error occurred while trying to log in.";  // Set the message
            _alert = 1;
        }
    }
    private async Task OnLoginButtonClick()
    {
        _isLoading = true;  // Start loading
        await HandleLogin();  // Handle the login
        HandleSnackbar();  // Then handle the SnackBar
        _isLoading = false;  // Stop loading
    }

    private void HandleSnackbar()
    {
        if (_alert == 0)
        {
            Snackbar.Add(_message, Severity.Success);
        }
        else
        {
            Snackbar.Add(_message, Severity.Error);
        }
    }
}
