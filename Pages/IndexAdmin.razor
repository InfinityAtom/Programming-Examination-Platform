@layout MainLayoutAdmin
@page "/ia-admin"
@using Programming_Examination_Platform.Services
@inject NavigationManager NavManager;
@inject IDialogService DialogService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject ProctorService ProctorService

<PageTitle>Dashboard Admin</PageTitle>
<MudLayout>
<MudAppBar Color="Color.Primary" Fixed="true" Elevation="0">
  <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer"/>
  <div style="padding: 10px; display: flex; align-items: center;">
    <img src="images/headerProctor.png" style="max-height: 150px; max-width: 250px;"/>
  </div>
  <MudSpacer/>
  <MudIconButton Icon="@Icons.Material.Filled.Verified" Color="Color.Inherit"/>
  <MudText Typo="Typo.h6">@_userEmail</MudText>
</MudAppBar>
<MudDrawer @bind-Open="@open" Elevation="0" >
    <MudNavMenu Class="mud-width-full">
        <MudText Typo="Typo.h6" Class="px-4">Programming Examination Platform</MudText>
        <MudText Typo="Typo.body2" Class="px-4 mud-text-secondary">WebAssembly Platform</MudText>
        <MudDivider Class="my-2" />
        <MudNavLink Href="/ia-Admin" Icon="@Icons.Material.Filled.Dashboard">Dashboard</MudNavLink>
        <MudNavLink Href="/view-users" Icon="@Icons.Material.Filled.SupervisedUserCircle">Students</MudNavLink>
        <MudNavLink Href="/ViewPlannedExams" Icon="@Icons.Material.Filled.DateRange">Planned exams</MudNavLink>
        <MudNavLink Href="/ExamGrades" Icon="@Icons.Material.Filled.Checklist">Exam results</MudNavLink>
    
        <MudDivider Class="my-2"/>
    <MudNavLink OnClick="OnLogoutButtonClick" Icon="@Icons.Material.Filled.Logout" IconColor="Color.Error">Log Out</MudNavLink>
    </MudNavMenu>
</MudDrawer>
<MudMainContent Class="pt-16 px-16">
  <MudContainer Class="mt-6">
<br/><br/>

    <MudText Typo="Typo.h2">Dashboard Admin</MudText>
    <br/><br/><br/><br/>
    <MudText Typo="Typo.h4">Accessibility Tools for Students</MudText>
    <br/>
    <MudStack Spacing="5" Row="true">
        <MudCard>
            <MudCardMedia Image="images/blind.png" Height="200"/>
            <MudCardContent>
                <MudText Typo="Typo.h5">Register</MudText>
                <MudText Typo="Typo.body2">Register students that are visually impaired for accessible<br/>  exam experiences.</MudText>
                <br/><br/><br/>
            </MudCardContent>
            <MudCardActions>
                <MudButton Href="/blind-register" Variant="Variant.Text" Color="Color.Primary">Register</MudButton>
            </MudCardActions>
        </MudCard>
        <MudCard>
                    <MudCardMedia Image="images/card.png" Height="200"/>
                    <MudCardContent>
                        <MudText Typo="Typo.h5">Generate access codes<br/> for visually impaired students</MudText>
                        <br/>
                        <MudText Typo="Typo.body2">The codes will be used by visually impaired students for easy login.&#8195; </MudText>
                        <br/><br/>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Href="/login-codes-generator" Variant="Variant.Text" Color="Color.Primary">Generate</MudButton>
                    </MudCardActions>
                </MudCard>
    </MudStack>
        <br/><br/><br/><br/>
<MudText Typo="Typo.h4">Proctor Tools</MudText>
<br/><br/>
<MudStack Spacing="3" Row="true">
    <MudCard>
        <MudCardMedia Image="images/viewUsersBanner.png" Height="200"/>
        <MudCardContent>
            <MudText Typo="Typo.h5">View the students</MudText>
            <MudText Typo="Typo.body2">View the students that are currently subscribed to you.&#8195; &#8195; &#8195;</MudText>
            <br/>
        </MudCardContent>
        <MudCardActions>
            <MudButton Href="/view-users" Variant="Variant.Text" Color="Color.Primary">View</MudButton>
        </MudCardActions>
    </MudCard>
    <MudCard>
        <MudCardMedia Image="images/datePicker.png" Height="200"/>
        <MudCardContent>
            <MudText Typo="Typo.h5">Pick a date for the exam</MudText>
            <MudText Typo="Typo.body2">Define the dates you want your students to book their exam.&#8195; &#8195; &#8195;</MudText>
            <br/>
        </MudCardContent>
        <MudCardActions>
            <MudButton Href="/ViewPlannedExams" Variant="Variant.Text" Color="Color.Primary">Pick</MudButton>
        </MudCardActions>
    </MudCard>
    <MudCard>
            <MudCardMedia Image="images/EditResultsBanner.png" Height="200"/>
            <MudCardContent>
                <MudText Typo="Typo.h5">Exam Results</MudText>
                <MudText Typo="Typo.body2">See your students performance in the exam. Edit their grades if necessary.&#8195; &#8195; &#8195;</MudText>
                <br/>
            </MudCardContent>
            <MudCardActions>
                <MudButton Href="/ExamGrades" Variant="Variant.Text" Color="Color.Primary">View</MudButton>
            </MudCardActions>
        </MudCard>
</MudStack>
<br/><br/><br/>


<style>
  .my-custom-class {
    backdrop-filter: blur(50px);
  }
</style>
  </MudContainer>
</MudMainContent>
</MudLayout>
@code {
    //Variables:
    bool open = false;

    void ToggleDrawer()
    {
        open = !open;
    }
    private int _userID;
    private string _userEmail;
    private string _selectedExam;
    private string _selectedDate;
    private bool _checkIfHasBookedExam;

    private string _studentStatus;
    
    private int _daysTillExam;

    //Constants
        private const string _localStorageUserId = "proctorID";
        private const string _navigationToLogin = "/";
        private const string _emailError = "Email not found";
        private const string _cssClassForDialogContext = "my-custom-class";
        private const string _dialogTitle = "⚠️ Warning";
        private string _userRole;

    protected override async Task OnInitializedAsync()
    {
        
        _userRole = await LocalStorage.GetItemAsync<string>("userRole");
        
    // Check if user is a student or if no role is set.
        if (string.IsNullOrEmpty(_userRole) || _userRole == "Student")
        {
            NavManager.NavigateTo("/loginAdmin");
            await LocalStorage.SetItemAsync("userID", -1);
            await LocalStorage.SetItemAsync("userRole", String.Empty);
            return;
        }
        
        _userID = await LocalStorage.GetItemAsync<int>(_localStorageUserId);
        if (_userID == -1) // or another value that represents "no ID"
        {  
            NavManager.NavigateTo("/loginAdmin");
            return;
        }
        
            var proctor = await ProctorService.GetProctorById(_userID);
            _userEmail = proctor?.Email ?? _emailError;
    }

    private async Task OnLogoutButtonClick()
    {
        await LocalStorage.SetItemAsync(_localStorageUserId, -1);
        NavManager.NavigateTo(_navigationToLogin);
    }

    private void OpenDialog1()
    {
        var options = new DialogOptions { ClassBackground = _cssClassForDialogContext };
        DialogService.Show<DialogPeP>(_dialogTitle, options);
    }

    private void OpenDialog2()
    {
        var options = new DialogOptions { ClassBackground = _cssClassForDialogContext };
        DialogService.Show<DialogIJ>(_dialogTitle, options);
    }

}