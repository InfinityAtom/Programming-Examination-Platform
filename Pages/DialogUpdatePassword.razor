@using Programming_Examination_Platform.Services
@using Programming_Examination_Platform.Model
@using System.ComponentModel.DataAnnotations
@using System.Security.Cryptography
@using System.Text
@inject NavigationManager NavManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject StudentService StudentService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
<MudDialog DisableBackdropClick="true" FullWidth="true">
    <DialogContent>
        <MudText Typo="Typo.h6">Please enter your current password and new password to proceed:</MudText>
        <MudTextField Label="Current Password" @bind-Value="@_currentPassword" InputType="InputType.Password" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Password" AdornmentColor="Color.Primary"></MudTextField>
        <MudTextField Label="New Password" @bind-Value="@_newPassword" InputType="InputType.Password" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Password" AdornmentColor="Color.Primary" Class="mt-2"></MudTextField>
        <MudTextField Label="Confirm New Password" @bind-Value="@_confirmPassword" InputType="InputType.Password" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Password" AdornmentColor="Color.Primary" Class="mt-2"></MudTextField>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="UpdatePassword" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CheckCircle">Update Password</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    private string _currentPassword;
    private string _newPassword;
    private string _confirmPassword;

    private async System.Threading.Tasks.Task UpdatePassword()
    {
        try
        {
            // Get the logged-in user's email from LocalStorage
            var userEmail = await LocalStorage.GetItemAsync<string>("userEmail");
            
            if (string.IsNullOrEmpty(userEmail))
            {
                Snackbar.Add("User is not logged in or email is missing.", Severity.Error);
                return;
            }

            // Fetch the student details using the email
            var student = await StudentService.GetStudentByEmail(userEmail);
            
            if (student != null)
            {
                // Compute the SHA256 hash of the current password entered
                string hashedCurrentPassword = ComputeSha256Hash(_currentPassword);
                
                // Verify the current password against the stored hashed password
                if (student.Password == hashedCurrentPassword)
                {
                    // Check if the new passwords match
                    if (_newPassword == _confirmPassword)
                    {
                        // Hash the new password
                        string hashedNewPassword = ComputeSha256Hash(_newPassword);

                        // Update the student's password in the database
                        student.Password = hashedNewPassword;
                        await StudentService.UpdateStudentPassword(student.StudnetId, hashedNewPassword);
                        
                        Snackbar.Add("Password updated successfully!", Severity.Success);
                        MudDialog.Close(DialogResult.Ok(true));
                        // Redirect or reload the page after successful update
                        LogoutdVerificationDialog();
                    }
                    else
                    {
                        Snackbar.Add("New passwords do not match. Please try again.", Severity.Error);
                    }
                }
                else
                {
                    Snackbar.Add("Incorrect current password. Please try again.", Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("User not found.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
    }
    private void LogoutdVerificationDialog()
    {
        var options = new DialogOptions
        {
            DisableBackdropClick = true, // Makes the dialog non-closable by clicking outside
            FullWidth = true, // Ensures the dialog is full width
            CloseButton = false, // Hides the close button
            MaxWidth = MaxWidth.Small // Sets the dialog's max width to small
        };

        DialogService.Show<DialogLogOut>("Log out?", options);
    }
    // Method to compute SHA256 hash
    private static string ComputeSha256Hash(string rawData)
    {
        using (SHA256 sha256Hash = SHA256.Create())
        {
            byte[] bytes = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(rawData));
            StringBuilder builder = new StringBuilder();
            for (int i = 0; i < bytes.Length; i++)
            {
                builder.Append(bytes[i].ToString("x2"));
            }
            return builder.ToString();
        }
    }
}
