@page "/students-bookviewer"
@layout MainLayoutAdmin
@using Programming_Examination_Platform.Services
@using Task = System.Threading.Tasks.Task
@using Programming_Examination_Platform.Model
@inject NavigationManager NavManager;
@inject IDialogService DialogService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject ProctorService ProctorService
<PageTitle>Dashboard Admin</PageTitle>
<MudLayout>
<MudAppBar Color="Color.Primary" Fixed="true" Elevation="0">
  <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer"/>
  <div style="padding: 10px; display: flex; align-items: center;">
    <img src="images/headerProctor.png" style="max-height: 150px; max-width: 250px;"/>
  </div>
  <MudSpacer/>
  <MudIconButton Icon="@Icons.Material.Filled.Verified" Color="Color.Inherit"/>
  <MudText Typo="Typo.h6">@_userEmail</MudText>
</MudAppBar>
<MudDrawer @bind-Open="@open" Elevation="0" >
    <MudNavMenu Class="mud-width-full">
        <MudText Typo="Typo.h6" Class="px-4">Programming Examination Platform</MudText>
        <MudText Typo="Typo.body2" Class="px-4 mud-text-secondary">WebAssembly Platform</MudText>
        <MudDivider Class="my-2" />
        <MudNavLink Href="/ia-Admin" Icon="@Icons.Material.Filled.Dashboard">Dashboard</MudNavLink>
        <MudNavLink Href="/view-users" Icon="@Icons.Material.Filled.SupervisedUserCircle">Students</MudNavLink>
        <MudNavLink Href="/ViewPlannedExams" Icon="@Icons.Material.Filled.DateRange">Planned exams</MudNavLink>
        <MudNavLink Href="/ExamGrades" Icon="@Icons.Material.Filled.Checklist">Exam results</MudNavLink>
    
        <MudDivider Class="my-2"/>
    <MudNavLink OnClick="OnLogoutButtonClick" Icon="@Icons.Material.Filled.Logout" IconColor="Color.Error">Log Out</MudNavLink>
    </MudNavMenu>
</MudDrawer>
<MudMainContent Class="pt-16 px-16">
  <MudContainer Class="mt-6">
<br/><br/>
<MudText Typo="Typo.h2" Align="Align.Center">Confirmed bookings with the ID: <storng>#@_esID</storng></MudText>
<br/>
<br/>
<MudText Typo="Typo.h4" Align="Align.Center">Logged in as: @_userEmail</MudText>
<br/>
<br/>
<style>
.center
{
      margin: auto;
      width: 80%;
      padding: 20px;
}     
</style>
<div class="center">
    <div class="center">
        <MudStack Spacing="15" Row="false">

            @foreach (var student in students)
            {
                <MudCard Elevation="5">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h5">
                                <strong>@student.FirstName @student.LastName</strong>
                            </MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton Icon="@Icons.Material.Filled.SupervisedUserCircle" Size="Size.Large"/>
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudField Label="Email" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AlternateEmail">@student.Email</MudField>
                        <MudField Label="Faculty" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.School">@student.Faculty</MudField>
                        <MudField Label="Group" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.PeopleAlt">@student.Groupa</MudField>
                    </MudCardContent>
                </MudCard>
            }

        </MudStack>
    </div>
</div>
<br/>
<br/>
<br/>
<br/>
  </MudContainer>
</MudMainContent>
</MudLayout>
@code {
    //Variables:
    bool open = false;

    void ToggleDrawer()
    {
        open = !open;
    }
    private int _userID;
    private int _esID;
    private string _userEmail;
        private const string _localStorageUserId = "proctorID";
        private const string _navigationToLogin = "/";
        private const string _emailError = "Email not found";

    private string _userRole;
    private string specializationName;
    private int count = 1;
    private List<Studenti> students = new List<Studenti>();

    protected override async Task OnInitializedAsync()
    {
        _userRole = await LocalStorage.GetItemAsync<string>("userRole");

    // Check if user is a student or if no role is set.
        if (string.IsNullOrEmpty(_userRole) || _userRole == "Student")
        {
            NavManager.NavigateTo("/loginAdmin");
            return;
        }

        _userID = await LocalStorage.GetItemAsync<int>(_localStorageUserId);
        _esID = await LocalStorage.GetItemAsync<int>("studentsBookedAtExamId");
        students = await ProctorService.GetStudentsByExamScheduleId(_esID);


        if (_userID == -1) // or another value that represents "no ID"
        {
            NavManager.NavigateTo("/loginAdmin");
            return;
        }

        var proctor = await ProctorService.GetProctorById(_userID);
        _userEmail = proctor?.Email ?? _emailError;
    }

    private async Task OnLogoutButtonClick()
    {
        await LocalStorage.SetItemAsync(_localStorageUserId, -1);
        NavManager.NavigateTo(_navigationToLogin);
    }

}