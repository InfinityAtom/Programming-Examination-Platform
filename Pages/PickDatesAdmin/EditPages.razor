@page "/editplannedexams"
@layout MainLayoutAdmin
@using Programming_Examination_Platform.Services
@using Task = System.Threading.Tasks.Task
@using Programming_Examination_Platform.Model
@using MudBlazor.Extensions
@inject NavigationManager NavManager;
@inject IDialogService DialogService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject ProctorService ProctorService
@inject ISnackbar Snackbar;

<MudAppBar Color="Color.Primary" Fixed="false" Elevation="0">
    <MudText Typo="Typo.h5">
        <strong>PeP Management</strong>
    </MudText>
    <MudSpacer/>
    <MudIconButton Icon="@Icons.Material.Filled.Shield" Color="Color.Inherit"/>
    <MudText Typo="Typo.h6">@_userEmail</MudText>
    <MudMenu Icon="@Icons.Material.Filled.Menu">
        <MudMenuItem OnClick="OnLogoutButtonClick" Icon="@Icons.Material.Filled.Logout">Log Out</MudMenuItem>
    </MudMenu>
</MudAppBar>
<br/><br/>
<MudText Typo="Typo.h2" Align="Align.Center">Edit Booking: #@_bookingId</MudText>
<br/><br/>

<br/><br/>
<style>
.center
{
      margin: auto;
      width: 80%;
      padding: 20px;
}     
</style>
<div class="center">
    <div class="center">
        <MudStack Spacing="15" Row="false">
            <MudCard Elevation="5">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5">
                            <strong>Booking: #@_bookingId</strong>
                        </MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.DateRange" Size="Size.Large"/>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudTextField Label="Update the room name:" @bind-Value="_roomName" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.HomeWork"/>
                    <MudNumericField @bind-Value="IntValue" Label="Add more places" Variant="Variant.Filled" Min="0" Max="20"/>
                </MudCardContent>
                <MudCardActions>
                    <MudStack Spacing="15" Row="true">
                        <MudButton Color="Color.Success" StartIcon="@Icons.Material.Filled.Check" OnClick="HandleConfirmClick">UPDATE</MudButton>
                        <MudButton Href="/Viewplannedexams" Color="Color.Error" StartIcon="@Icons.Material.Filled.Close">CANCEL</MudButton>
                    </MudStack>
                </MudCardActions>
            </MudCard>
        </MudStack>
    </div>
</div>
<br/><br/><br/><br/><br/><br/>

@code {
    private int _userID;
    private string _userEmail;
    private string _selectedExam;
    private string _selectedDate;
    private string _roomName;
    private bool _checkIfHasBookedExam;
    private int _bookingId;
    public int IntValue { get; set; }
    private string _studentStatus;

    private int _daysTillExam;

    //Constants
        private const string _localStorageUserId = "proctorID";
        private const string _navigationToLogin = "/";
        private const string _emailError = "Email not found";
    private string _userRole;
    private List<ExamSchedule> schedules = new List<ExamSchedule>();

    protected override async Task OnInitializedAsync()
    {
        _userRole = await LocalStorage.GetItemAsync<string>("userRole");
        _bookingId = await LocalStorage.GetItemAsync<int>("editingBookingId");
    // Check if user is a student or if no role is set.
        if (string.IsNullOrEmpty(_userRole) || _userRole == "Student")
        {
            NavManager.NavigateTo("/loginAdmin");
            return;
        }

        _userID = await LocalStorage.GetItemAsync<int>(_localStorageUserId);
        schedules = await ProctorService.GetExamScheduleByProctorId(_userID);
        if (_userID == -1) // or another value that represents "no ID"
        {
            NavManager.NavigateTo("/loginAdmin");
            return;
        }

        var proctor = await ProctorService.GetProctorById(_userID);
        _userEmail = proctor?.Email ?? _emailError;
    }

    private async Task HandleConfirmClick()
    {
    // Try updating the schedule
        bool success = await ProctorService.UpdateExamSchedule(_bookingId, _roomName, IntValue);

        if (success)
        {
            Snackbar.Add("Exam schedule updated successfully!", Severity.Success);
            NavManager.NavigateTo("/ViewPlannedExams");
        }
        else
        {
            Snackbar.Add("Failed to update the exam schedule!", Severity.Error);
        }
    }


    private async Task OnLogoutButtonClick()
    {
        await LocalStorage.SetItemAsync(_localStorageUserId, -1);
        NavManager.NavigateTo(_navigationToLogin);
    }

}