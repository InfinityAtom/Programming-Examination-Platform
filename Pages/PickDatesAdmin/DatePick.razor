@page "/DatePick"
@layout MainLayoutAdmin
@using Programming_Examination_Platform.Services
@using Task = System.Threading.Tasks.Task
@using Programming_Examination_Platform.Model
@inject NavigationManager NavManager;
@inject IDialogService DialogService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject ProctorService ProctorService
@inject ISnackbar Snackbar;

<MudLayout>
<MudAppBar Color="Color.Primary" Fixed="true" Elevation="0">
  <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer"/>
  <div style="padding: 10px; display: flex; align-items: center;">
    <img src="images/headerProctor.png" style="max-height: 150px; max-width: 250px;"/>
  </div>
  <MudSpacer/>
  <MudIconButton Icon="@Icons.Material.Filled.Verified" Color="Color.Inherit"/>
  <MudText Typo="Typo.h6">@_userEmail</MudText>
</MudAppBar>
<MudDrawer @bind-Open="@open" Elevation="0" >
    <MudNavMenu Class="mud-width-full">
        <MudText Typo="Typo.h6" Class="px-4">Programming Examination Platform</MudText>
        <MudText Typo="Typo.body2" Class="px-4 mud-text-secondary">WebAssembly Platform</MudText>
        <MudDivider Class="my-2" />
        <MudNavLink Href="/ia-Admin" Icon="@Icons.Material.Filled.Dashboard">Dashboard</MudNavLink>
        <MudNavLink Href="/view-users" Icon="@Icons.Material.Filled.SupervisedUserCircle">Students</MudNavLink>
        <MudNavLink Href="/ViewPlannedExams" Icon="@Icons.Material.Filled.DateRange">Planned exams</MudNavLink>
        <MudNavLink Href="/ExamGrades" Icon="@Icons.Material.Filled.Checklist">Exam results</MudNavLink>
    
        <MudDivider Class="my-2"/>
    <MudNavLink OnClick="OnLogoutButtonClick" Icon="@Icons.Material.Filled.Logout" IconColor="Color.Error">Log Out</MudNavLink>
    </MudNavMenu>
</MudDrawer>
<MudMainContent Class="pt-16 px-16">
  <MudContainer Class="mt-6">
<style>
.center
{
      margin: auto;
      width: 80%;
      padding: 20px;
}     
</style>
<div class="center">
    <div class="center">
        <MudText Typo="Typo.h2" Align="Align.Center">Pick a date</MudText>
        <br/><br/>
        <MudCard>
            <MudCardMedia Image="images/datePicker.png" Height="200"/>
            <MudCardContent>
                <MudText Typo="Typo.h5">This form is designed for you to select exam dates</MudText>
                <MudText Typo="Typo.caption">When the student's will book their exam, they will only be able to pick a date that you set!</MudText>
                <br/><br/>
                <MudDatePicker PickerVariant="PickerVariant.Dialog"
                               Label="Pick a date"
                               DateFormat="dd/MM/yyyy"
                               TValue="DateTime?"
                               @bind-Date="_selectedDateOnly"/>
                <MudTimePicker PickerVariant="PickerVariant.Dialog" 
                               Label="Select the time" 
                               @bind-Time="_selectedTime"
                               TimeFormat="HH:mm:ss"
                               TValue="Time?"/>

                <MudTextField T="string" Label="Exam Room Name" @bind-Value="_examRoomName" HelperText="" Required="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.HomeWork" AdornmentColor="Color.Primary"/>
                <MudTextField T="string" Label="Number of seats" @bind-Value="_numberOfSeats" HelperText="" Required="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AirlineSeatReclineExtra" AdornmentColor="Color.Primary"/>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="HandleConfirmClick">Confirm</MudButton>
            </MudCardActions>
        </MudCard>
    </div>
</div>
<br/><br/>
  </MudContainer>
</MudMainContent>
</MudLayout>
@code {
    //Variables:
    bool open = false;

    void ToggleDrawer()
    {
        open = !open;
    }
    private int _userID;
    private string _userEmail;
    private string _selectedExam;
    private DateTime? _selectedDateOnly = DateTime.Now;
    private TimeSpan? _selectedTime;
    private bool _checkIfHasBookedExam;
    private string _examRoomName;
    private string _numberOfSeats;

    private string _studentStatus;

    private int _daysTillExam;

    //Constants
    private const string _localStorageUserId = "proctorID";
    private const string _navigationToLogin = "/";
    private const string _emailError = "Email not found";
    private string _userRole;


    protected override async Task OnInitializedAsync()
    {
        _userRole = await LocalStorage.GetItemAsync<string>("userRole");

        // Check if user is a student or if no role is set.
        if (string.IsNullOrEmpty(_userRole) || _userRole == "Student")
        {
            NavManager.NavigateTo("/loginAdmin");
            return;
        }

        _userID = await LocalStorage.GetItemAsync<int>(_localStorageUserId);
        // await LocalStorage.SetItemAsync("selectedDate", _selectedDate.Value);
        if (_userID == -1) // or another value that represents "no ID"
        {
            NavManager.NavigateTo("/loginAdmin");
            return;
        }

        var proctor = await ProctorService.GetProctorById(_userID);
        _userEmail = proctor?.Email ?? _emailError;
    }

    private async Task HandleConfirmClick()
    {
        if(_selectedDateOnly.HasValue)
        {
            DateTime date = _selectedDateOnly.Value;
            DateTime combinedTime = date.Add(_selectedTime.Value);
        
        
        // Create a new ExamSchedule instance and populate it
        var examSchedule = new ExamSchedule
        {
            ProctorId = _userID,
            ExamId = 1,
            Date = combinedTime,
            RoomName = _examRoomName,
            TotalPlaces = Convert.ToInt32(_numberOfSeats),
            AvailablePlaces = Convert.ToInt32(_numberOfSeats)
        };
        await ProctorService.AddExamSchedule(examSchedule);
        Snackbar.Add("Exam schedule added successfully!", Severity.Success);
        NavManager.NavigateTo("/ViewPlannedExams");
        }
        
        else
        {
            Snackbar.Add("Date or time is null!", Severity.Error);
        }
    }

    private async Task OnLogoutButtonClick()
    {
        await LocalStorage.SetItemAsync(_localStorageUserId, -1);
        NavManager.NavigateTo(_navigationToLogin);
    }

}