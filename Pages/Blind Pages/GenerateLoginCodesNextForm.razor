@page "/login-codes-generator/view-code"
@layout MainLayoutAdmin
@using Programming_Examination_Platform.Services
@using Task = System.Threading.Tasks.Task
@using Programming_Examination_Platform.Model
@using Microsoft.EntityFrameworkCore
@using MudExtensions
@using ZXing;
@inject NavigationManager NavManager;
@inject IDialogService DialogService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage;
@inject ProctorService ProctorService
@inject ISnackbar Snackbar;
@inject JavaExamContext DbContext;
@using System.Text;
@using System.Security.Cryptography;
@using QuestPDF;
@using Color = MudBlazor.Color
@using Size = MudBlazor.Size
@using System.Drawing
@using System.Drawing.Imaging
@using QuestPDF.Fluent
@using QuestPDF.Helpers
@using QuestPDF.Infrastructure
@using ImageFormat = System.Drawing.Imaging.ImageFormat
@inject IJSRuntime JS

<style>
.loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(255, 255, 255, 0.8); /* White background with 70% opacity */
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    z-index: 1000; /* Ensure it's above other content */
    }
    .center-content {
        display: flex;
        justify-content: center;
        align-items: center;
    }

</style>
@if (isLoading)
{
  <div class="loading-overlay">
    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true"/>
    <MudText Typo="Typo.h5">Loading, please wait...</MudText>
  </div>
}
else
{
  <MudLayout>
    <MudAppBar Color="Color.Primary" Fixed="true" Elevation="0">
      <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer"/>
      <div style="padding: 10px; display: flex; align-items: center;">
        <img src="images/headerProctor.png" style="max-height: 150px; max-width: 250px;"/>
      </div>
      <MudSpacer/>
      <MudIconButton Icon="@Icons.Material.Filled.Verified" Color="Color.Inherit"/>
      <MudText Typo="Typo.h6">@_userEmail</MudText>
    </MudAppBar>
    <MudDrawer @bind-Open="@open" Elevation="0">
      <MudNavMenu Class="mud-width-full">
        <MudText Typo="Typo.h6" Class="px-4">Programming Examination Platform</MudText>
        <MudText Typo="Typo.body2" Class="px-4 mud-text-secondary">WebAssembly Platform</MudText>
        <MudDivider Class="my-2"/>
        <MudNavLink Href="/ia-Admin" Icon="@Icons.Material.Filled.Dashboard">Dashboard</MudNavLink>
        <MudNavLink Href="/view-users" Icon="@Icons.Material.Filled.SupervisedUserCircle">Students</MudNavLink>
        <MudNavLink Href="/ViewPlannedExams" Icon="@Icons.Material.Filled.DateRange">Planned exams</MudNavLink>
        <MudNavLink Href="/ExamGrades" Icon="@Icons.Material.Filled.Checklist">Exam results</MudNavLink>

        <MudDivider Class="my-2"/>
        <MudNavLink OnClick="OnLogoutButtonClick" Icon="@Icons.Material.Filled.Logout" IconColor="Color.Error">Log Out</MudNavLink>
      </MudNavMenu>
    </MudDrawer>
    <MudMainContent Class="pt-16 px-16">
      <MudContainer Class="mt-6">
        <MudTimeline TimelineOrientation="TimelineOrientation.Horizontal" TimelinePosition="TimelinePosition.Bottom">
          <MudTimelineItem Color="Color.Success" Variant="Variant.Filled" Icon="@Icons.Material.Filled.CheckCircle">
            <ItemContent>
              <MudAlert Severity="Severity.Success">Select the student</MudAlert>
            </ItemContent>
          </MudTimelineItem>
          <MudTimelineItem Color="Color.Info" Variant="Variant.Filled">
            <ItemContent>
              <MudAlert Severity="Severity.Info" Icon="@Icons.Material.Filled.CardGiftcard">Generate the code</MudAlert>
            </ItemContent>
          </MudTimelineItem>
        </MudTimeline>
        <br/><br/>
        <MudText Typo="Typo.h4" Align="Align.Center">2. Generate the login codes</MudText>
        <br/><br/>
  
        @if (!codeGenerated)
        {
          <MudCard>
            <MudCardHeader>
              <CardHeaderContent>
                <MudText Typo="Typo.h5">The access card</MudText>
              </CardHeaderContent>
              <CardHeaderActions>
                <MudIconButton Icon="@Icons.Material.Filled.CardGiftcard" Size="Size.Large"/>
              </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent class="center-content">
              <MudText Typo="Typo.h5" Align="Align.Center">In order to see the code, please click Generate.</MudText>
            </MudCardContent>
            <br/><br/><br/>
            <MudCardActions>
              <MudButton StartIcon="@Icons.Material.Filled.GeneratingTokens" Color="Color.Info" Variant="Variant.Outlined" @onclick="GenerateCode">@(codeGenerated ? "Download" : "Generate")</MudButton>
              <br/><br/>
              <MudButton StartIcon="@Icons.Material.Filled.Save" Color="Color.Success" Variant="Variant.Outlined" @onclick="SaveCode" Disabled="@(!codeGenerated)">Save</MudButton>
              <br/><br/>
              <MudButton StartIcon="@Icons.Material.Filled.ArrowBack" Color="Color.Info" Variant="Variant.Outlined" Href="/login-codes-generator">Select another student</MudButton>
            </MudCardActions>
          </MudCard>
          <br/>
          <br/>
          <br/>
          <br/>
          <br/>
          <br/>
        }
        else
        {
          <MudCard>
            <MudCardHeader>
              <CardHeaderContent>
                  <MudText Typo="Typo.h5">The Access Card</MudText>
              </CardHeaderContent>
              <CardHeaderActions>
                <MudIconButton Icon="@Icons.Material.Filled.CardGiftcard" Size="Size.Large"/>
              </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
              <MudCard>
                <MudCardHeader>
                  <MudText Typo="Typo.h4" Align="Align.Center">@student.FirstName @(student.LastName)'s card</MudText>
                </MudCardHeader>
                <MudCardContent class="center-content">
                  <MudSpacer/>
                  <MudItem xs="12" sm="8">
                    <MudBarcode @ref="_barcode" @bind-Value="_qrValue" Width="_width" Height="_height" BarcodeFormat="_barcodeFormat" Clickable="_clickable" Color="@_color" BackgroundColor="@_backgroundColor" StrokeWidth="_strokeWidth"/>
                  </MudItem>
                  <MudStack Spacing="1">
                    <MudText Typo="Typo.caption">Student: <b>@student.FirstName @student.LastName</b></MudText>
                    <MudText Typo="Typo.caption">Email: <b>@student.Email</b></MudText>
                    <MudText Typo="Typo.caption">Faculty: <b>@student.Faculty</b></MudText>
                    <MudText Typo="Typo.caption">Group: <b>@student.Groupa</b></MudText>
                    <MudText Typo="Typo.caption">Proctor: <b>@_userEmail</b></MudText>
                    <MudText Typo="Typo.caption">Code: <b>@_qrValue</b></MudText>
                  </MudStack>
                  <MudSpacer/>
                </MudCardContent>
              </MudCard>
            </MudCardContent>
            <br/><br/><br/>
            <MudCardActions>
              @if (!codeGenerated)
              {
                <MudButton StartIcon="@Icons.Material.Filled.GeneratingTokens" Color="Color.Info" Variant="Variant.Outlined" @onclick="GenerateCode">Generate</MudButton>
              }
              @if (codeGenerated)
              {
                @if (isSaved)
                {
                  <MudButton StartIcon="@Icons.Material.Filled.Download" Color="Color.Info" Variant="Variant.Outlined" @onclick="GenerateAndDownloadPdf">Download</MudButton>
                }
                else
                {
                  Snackbar.Add("Save the card first, then download it", Severity.Warning);
                  <MudButton StartIcon="@Icons.Material.Filled.GeneratingTokens" Color="Color.Info" Variant="Variant.Outlined" @onclick="GenerateCode" Disabled="true">Generate</MudButton>
                }
              }
              <br/><br/>
              <MudButton StartIcon="@Icons.Material.Filled.Save" Color="Color.Success" Variant="Variant.Outlined" @onclick="SaveCode" Disabled="@(!codeGenerated || isSaved)">Save</MudButton>
              <br/><br/>
              <MudButton StartIcon="@Icons.Material.Filled.ArrowBack" Color="Color.Info" Variant="Variant.Outlined" Href="/login-codes-generator">Select another student</MudButton>
            </MudCardActions>
          </MudCard>
          <br/>
          <br/>
          <br/>
          <br/>
          <br/>
          <br/>
        }
      </MudContainer>
    </MudMainContent>
  </MudLayout>
}


@code {
  // Variables:
  bool open = false;
  private bool isLoading = false;

  void ToggleDrawer()
  {
    open = !open;
  }

  MudBarcode? _barcode;
  string? _qrValue;
  int _width = 200;
  int _height = 200;
  BarcodeFormat _barcodeFormat = BarcodeFormat.QR_CODE;
  bool _clickable = false;
  string _color = "black";
  string _backgroundColor = "white";
  int _strokeWidth = 0;

  private Studenti student;
  private int selectedStudent;
  private int _userID;
  private string _userEmail;
  // Constants
    private const string _localStorageUserId = "proctorID";
    private const string _navigationToLogin = "/";
    private const string _emailError = "Email not found";
  private bool codeGenerated = false;
  private bool isSaved = false;

  private async Task GenerateCode()
  {
    if (!codeGenerated)
    {
      _qrValue = ComputeSha256Hash(student.Email); // Assuming this generates the QR code
      codeGenerated = true;
    }
  }

  private async Task GenerateAndDownloadPdf()
{
    var qrImageStream = GenerateBarcodeImage(_qrValue);
    var flipQrImageStream = GenerateBarcodeImage("WRONGSIDEPLEASEFLIPTHEPAGEANDSCANTHEDOCUMENTAGAIN");

    var document = Document.Create(container =>
    {
        container.Page(page =>
        {
            page.Size(PageSizes.A4.Portrait());
            page.Margin(20);
            page.Content().Row(row =>
            {
                row.RelativeColumn().Width(220).Image(qrImageStream, ImageScaling.FitArea);
                row.RelativeColumn().Width(220).Stack(column =>
                {
                    column.Item().Text($"The code for: {student.FirstName} {student.LastName}", TextStyle.Default.Size(16).Bold());
                    column.Item().Text($"Student: {student.FirstName} {student.LastName}", TextStyle.Default.Size(12));
                    column.Item().Text($"Email: {student.Email}", TextStyle.Default.Size(12));
                    column.Item().Text($"Faculty: {student.Faculty}", TextStyle.Default.Size(12));
                    column.Item().Text($"Group: {student.Groupa}", TextStyle.Default.Size(12));
                    column.Item().Text($"Proctor: {_userEmail}", TextStyle.Default.Size(12));
                    column.Item().Text("\n\n\n\n\n\n\nPlease print this document and hand it to the person mentioned above", TextStyle.Default.Size(12).Bold());
                });
            });
        });

        container.Page(page =>
        {
            page.Size(PageSizes.A4.Portrait());
            page.Margin(20);
            page.Content().Row(row =>
            {
                row.RelativeColumn().Width(220).Image(flipQrImageStream, ImageScaling.FitArea);
                row.RelativeColumn().Width(220).Stack(column =>
                {
                    column.Item().Text("This is not the correct side of the paper, flip the page to scan correctly!", TextStyle.Default.Size(16).Bold());
                });
            });
        });
    });

    var pdfBytes = document.GeneratePdf();
    await JS.InvokeAsync<object>("BlazorDownloadFile", $"{student.FirstName}_{student.LastName}_Access_Code.pdf", "application/pdf", Convert.ToBase64String(pdfBytes));
}



  private MemoryStream GenerateBarcodeImage(string qrValue)
  {
    var writer = new BarcodeWriterPixelData
    {
      Format = BarcodeFormat.QR_CODE,
      Options = new ZXing.Common.EncodingOptions
      {
        Height = _height,
        Width = _width,
        Margin = 0
      }
    };

    var pixelData = writer.Write(qrValue);
    var bitmap = new Bitmap(pixelData.Width, pixelData.Height, PixelFormat.Format4bppIndexed);
    var bitmapData = bitmap.LockBits(new Rectangle(0, 0, pixelData.Width, pixelData.Height), ImageLockMode.WriteOnly, PixelFormat.Format32bppRgb);
    try
    {
  // Copy pixel data into bitmap
      System.Runtime.InteropServices.Marshal.Copy(pixelData.Pixels, 0, bitmapData.Scan0, pixelData.Pixels.Length);
    }
    finally
    {
      bitmap.UnlockBits(bitmapData);
    }

  // Save to memory stream
    var stream = new MemoryStream();
    bitmap.Save(stream, ImageFormat.Png);
    stream.Position = 0; // Reset stream position to the beginning
    return stream;
  }


  private async Task SaveCode()
  {
    var newCode = new LoginCodesBlind
    {
  // Do not set CodeID if it's auto-generated
      StudentId = student.StudnetId,
      LoginCode = _qrValue
    };

    DbContext.LoginCodesBlinds.Add(newCode);
    isSaved = true;
    try
    {
      await DbContext.SaveChangesAsync();
    }
    catch (DbUpdateException ex)
    {
  // Handle exception, possibly log it or show an error message
      Snackbar.Add(("An error occurred while saving the entity changes: " + ex.InnerException?.Message), Severity.Error);
      throw;
    }
  }

  protected override async Task OnInitializedAsync()
  {
    try
    {
      isLoading = true;
      _userID = await LocalStorage.GetItemAsync<int>(_localStorageUserId);
      if (_userID <= 0)
      {
        NavManager.NavigateTo("/loginAdmin");
        return;
      }
      var proctor = await DbContext.Proctors.FirstOrDefaultAsync(p => p.ProctorId == _userID);
      _userEmail = proctor?.Email ?? _emailError;
      selectedStudent = await LocalStorage.GetItemAsync<int>("selectedBlindStudent");
      student = await ProctorService.GetStudentById(selectedStudent);
      string hashedString = ComputeSha256Hash(student.Email);
      _qrValue = hashedString;
    }
    catch (Exception e)
    {
      Console.WriteLine(e);
      throw;
    }
    finally
    {
      isLoading = false;
    }
  }

  private static string ComputeSha256Hash(string rawData)
  {
  // Create a SHA256   
    using (SHA256 sha256Hash = SHA256.Create())
    {
  // ComputeHash - returns byte array  
      byte[] bytes = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(rawData));

  // Convert byte array to a string   
      StringBuilder builder = new StringBuilder();
      for (int i = 0; i < bytes.Length; i++)
      {
        builder.Append(bytes[i].ToString("x2"));
      }
      return builder.ToString();
    }
  }

  private async Task OnLogoutButtonClick()
  {
    await LocalStorage.SetItemAsync(_localStorageUserId, -1);
    NavManager.NavigateTo(_navigationToLogin);
  }

}