@page "/ExamGrades"
@layout MainLayoutAdmin
@using Programming_Examination_Platform.Services
@using Task = System.Threading.Tasks.Task
@using Programming_Examination_Platform.Model
@inject NavigationManager NavManager;
@inject IDialogService DialogService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject ProctorService ProctorService
<PageTitle>Dashboard Admin</PageTitle>

<MudAppBar Color="Color.Primary" Fixed="false" Elevation="0">
  <MudText Typo="Typo.h5">
    <strong>PeP Management</strong>
  </MudText>
  <MudSpacer/>
  <MudIconButton Icon="@Icons.Material.Filled.Shield" Color="Color.Inherit"/>
  <MudText Typo="Typo.h6">@_userEmail</MudText>
  <MudMenu Icon="@Icons.Material.Filled.Menu">
    <MudMenuItem OnClick="OnLogoutButtonClick" Icon="@Icons.Material.Filled.Logout">Log Out</MudMenuItem>
  </MudMenu>
</MudAppBar>
<br/><br/>
<style>
.center
{
      margin: auto;
      width: 80%;
      padding: 20px;
}     
</style>
<div class="center">
  <div class="center">
 <MudStack Spacing="15" Row="false">
     @if (studentExamDetailsList != null && studentExamDetailsList.Count > 0)
     {
         @foreach (var details in studentExamDetailsList)
         {
             <MudCard Elevation="5">
                 <MudCardHeader>
                     <CardHeaderContent>
                         <MudText Typo="Typo.h5">
                             <strong>@details.FirstName @details.LastName</strong>
                         </MudText>
                     </CardHeaderContent>
                     <CardHeaderActions>
                         <MudIconButton Icon="@Icons.Material.Filled.Beenhere" Size="Size.Large"/>
                     </CardHeaderActions>
                 </MudCardHeader>
                 <MudCardContent>
                     <MudField Label="Email: " Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AlternateEmail">@details.Email</MudField>
                     <MudField Label="Exam:" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Custom.FileFormats.FileCode">@details.ExamName</MudField>
                     <MudField Label="Date:" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.CalendarMonth">@details.BookingDate.ToShortDateString()</MudField>
                     <MudField Label="Final Grade:" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.DoneAll">@details.FinalGrade</MudField>
                     <MudField Label="Status:" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Stars">
                         <strong>@details.ExamStatus</strong>
                     </MudField>
                 </MudCardContent>
                 <MudCardActions>
                     <!-- You can add more actions/buttons here if needed -->
                 </MudCardActions>
             </MudCard>
         }
     }
     else
     {
         <MudText Typo="Typo.h5">No exam details found.</MudText>
     }
 </MudStack>
  </div>
</div>


@code {
  private int _userID;
  private string _userEmail;
    private const string _localStorageUserId = "proctorID";
    private const string _navigationToLogin = "/";
    private const string _emailError = "Email not found";
  private string _userRole;
  private string specializationName;
  private int count = 1;
  private List<Studenti> students = new List<Studenti>();
  private List<StudentExamDetails> studentExamDetailsList = new List<StudentExamDetails>();

  protected override async Task OnInitializedAsync()
  {
    _userRole = await LocalStorage.GetItemAsync<string>("userRole");

  // Check if user is a student or if no role is set.
    if (string.IsNullOrEmpty(_userRole) || _userRole == "Student")
    {
      NavManager.NavigateTo("/loginAdmin");
      return;
    }

    _userID = await LocalStorage.GetItemAsync<int>(_localStorageUserId);
    if (_userID == -1) // or another value that represents "no ID"
    {
      NavManager.NavigateTo("/loginAdmin");
      return;
    }
    var proctor = await ProctorService.GetProctorById(_userID);
    _userEmail = proctor?.Email ?? _emailError;
    studentExamDetailsList = await ProctorService.GetStudentExamDetails(_userID);
  }

  private async Task OnLogoutButtonClick()
  {
    await LocalStorage.SetItemAsync(_localStorageUserId, -1);
    NavManager.NavigateTo(_navigationToLogin);
  }

}