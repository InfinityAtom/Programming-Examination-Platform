@page "/confirmation-email"
@layout LoginLayout
@using Programming_Examination_Platform.Model
@using Microsoft.EntityFrameworkCore
@using System.Security.Cryptography
@using System.Text
@using System.Net.Mail
@using System.Net
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<br /><br />
<br />
<style>
    body {
        background: rgb(255,255,255);
        background: radial-gradient(circle, rgba(89,74,226,1) 0%, rgba(0,32,96,0.22172619047619047) 100%);
    }

    .center {
        margin: auto;
        width: 80%;
        padding: 20px;
    }

    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        z-index: 1000;
    }

    .custom-card {
        width: 100%;
        max-width: 800px;
        padding: 10px;
    }

    .custom-card-content {
        padding: 20px;
    }

    .svg-icon {
        width: 25px;
        height: 25px;
    }

    .blur-overlay {
        filter: blur(2px);
        pointer-events: none;
    }
</style>

<div class="@(_isPageBlurred ? "blur-overlay" : "")">
    <MudAppBar Color="Color.Primary" Fixed="true" Elevation="0">
        <div style="padding: 10px; display: flex; align-items: center;">
            <img src="images/header.png" style="max-height: 50px; max-width: 201px;" />
        </div>
    </MudAppBar>
    <br />
    <br />
    <br />
    <br />
    <br />
    <br />
    <br />
    <MudStack Spacing="15" Row="true" Justify="Justify.Center">
        <MudSpacer/>
        <MudCard Class="custom-card">
            <MudCardMedia Image="images/registerBanner.png" Height="200" />
            <MudCardContent Class="custom-card-content">
               <MudText Typo="Typo.h4">Email Confirmation</MudText>
                <MudText Typo="Typo.h6">Enter the 6-digit code sent to @Email</MudText>
                <br/>
               <MudTextField T="string" Label="Verification Code" @bind-Value="_value" MaxLength="6" />
               <br/><br/>
                <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.RestartAlt" FullWidth="true" Color="Color.Primary" OnClick="ResendCode" Disabled="@_isResendDisabled">Resend Code</MudButton>
                <br/><br/>
               <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.CheckCircle" FullWidth="true" Color="Color.Primary" OnClick="VerifyCode">Verify</MudButton>
            </MudCardContent>
        </MudCard>
        <MudSpacer/>
    </MudStack>
</div>
<br />
<br />
<br />

@code {
    private string _value;
    private bool _isResendDisabled;
    private string Email { get; set; }
    private bool _isPageBlurred = false;

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        Email = await LocalStorage.GetItemAsync<string>("userEmail");
    }

    private async System.Threading.Tasks.Task VerifyCode()
    {
        var storedCode = await LocalStorage.GetItemAsync<string>("verificationCode");

        if (_value == storedCode)
        {
            _isPageBlurred = true; // Blur the page
            Snackbar.Add("Verification successful!", Severity.Success);
            await RegisterPasskey();
        }
        else
        {
            Snackbar.Add("Incorrect verification code.", Severity.Error);
        }
    }

    private async System.Threading.Tasks.Task RegisterPasskey()
    {
        try
        {
            var publicKeyCredentialCreationOptions = new
            {
                challenge = Convert.ToBase64String(new byte[32]),
                rp = new
                {
                    name = "Programming Examination Platform",
                    id = new Uri(NavigationManager.BaseUri).Host
                },
                user = new
                {
                    id = Convert.ToBase64String(Encoding.UTF8.GetBytes(Email)),
                    name = Email,
                    displayName = Email.Split('@')[0]
                },
                pubKeyCredParams = new[]
                {
                    new { type = "public-key", alg = -7 } // ES256
                },
                authenticatorSelection = new
                {
                    authenticatorAttachment = "cross-platform",
                    userVerification = "required",
                },
                timeout = 60000,
                attestation = "ble"
            };

            var credential = await JSRuntime.InvokeAsync<object>("createCredential", publicKeyCredentialCreationOptions);

            if (credential != null)
            {
                Snackbar.Add("Successfully registered with Passkey! Redirecting...", Severity.Success);
                NavigationManager.NavigateTo("/complete-registration");
            }
            else
            {
                Snackbar.Add("Passkey registration canceled.", Severity.Error);
                NavigationManager.NavigateTo("/register"); // Redirect to register if canceled
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
            NavigationManager.NavigateTo("/register"); // Redirect to register if error occurs
        }
    }

    private async System.Threading.Tasks.Task ResendCode()
    {
        _isResendDisabled = true;

        string verificationCode = GenerateVerificationCode();
        await LocalStorage.SetItemAsync("verificationCode", verificationCode);
        await SendVerificationCodeEmail(Email, verificationCode);

        Snackbar.Add("A new verification code has been sent.", Severity.Info);

        await System.Threading.Tasks.Task.Delay(20000);
        _isResendDisabled = false;
    }

    private string GenerateVerificationCode()
    {
        var random = new Random();
        return random.Next(100000, 999999).ToString();
    }

    public async System.Threading.Tasks.Task SendVerificationCodeEmail(string email, string code)
    {
        try
        {
            var fromAddress = new MailAddress("java.exam@infinity-atom.ro", "Programming Examination Platform");
            var toAddress = new MailAddress(email);
            string subject = "Your Verification Code";
            string headerImageBase64 = Convert.ToBase64String(System.IO.File.ReadAllBytes("wwwroot/images/header.png"));
            string headerImageSrc = $"data:image/png;base64,{headerImageBase64}";

            string body = $@"
<!DOCTYPE html>
<html lang='en'>
<head>
    <meta charset='UTF-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
    <style>
        body {{
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
        }}
        .container {{
            max-width: 600px;
            margin: 0 auto;
            background-color: #ffffff;
            padding: 20px;
            border: 1px solid #dddddd;
            border-radius: 5px;
        }}
        .header {{
            background-color: rgba(89,74,226,1);
            padding: 10px;
            text-align: center;
            color: white;
        }}
        .header img {{
            max-width: 320px; /* Smaller size for higher quality rendering */
            height: auto;
        }}
        .content {{
            padding: 20px;
            line-height: 1.6;
        }}
        .content h1 {{
            color: #333333;
        }}
        .content p {{
            color: #666666;
        }}
        .code-box {{
            background-color: #f9f9f9;
            padding: 15px;
            border: 1px solid #dddddd;
            border-radius: 5px;
            text-align: center;
            font-size: 24px;
            font-weight: bold;
            letter-spacing: 5px;
            color: #333333;
        }}
        .footer {{
            background-color: #333333;
            padding: 10px;
            text-align: center;
            color: white;
            font-size: 12px;
        }}
        .footer a {{
            color: #ffffff;
            text-decoration: none;
        }}
        .footer a:hover {{
            text-decoration: underline;
        }}
    </style>
</head>
<body>
    <div class='container'>
        <div class='header'>
            <img src='{headerImageSrc}' alt='Company Logo'>
        </div>
        <div class='content'>
            <h1>Email Verification</h1>
            <p>Hello,</p>
            <p>Thank you for registering with the Programming Examination Platform. To complete your registration, please enter the following 6-digit code in the application:</p>
            <div class='code-box'>{code}</div>
            <p>This code will expire in 10 minutes.</p>
            <p>If you did not request this code, please ignore this email.</p>
        </div>
        <div class='footer'>
            <p>&copy; 2024 Infinity Atom. All rights reserved.</p>
            <p><a href='#'>Privacy Policy</a> | <a href='#'>Terms of Service</a></p>
        </div>
    </div>
</body>
</html>";

            var smtp = new SmtpClient
            {
                Host = "mail.infinity-atom.ro",
                Port = 587,
                EnableSsl = true,
                DeliveryMethod = SmtpDeliveryMethod.Network,
                UseDefaultCredentials = false,
                Credentials = new NetworkCredential(fromAddress.Address, "p@SSWORD20caractereabc1")
            };

            using (var message = new MailMessage(fromAddress, toAddress))
            {
                message.Subject = subject;
                message.Body = body;
                message.IsBodyHtml = true;
                await smtp.SendMailAsync(message);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            Snackbar.Add($"An error occurred while sending the email: {ex.Message}", Severity.Error);
        }
    }
}