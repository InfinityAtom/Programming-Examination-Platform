@page "/booking/Selectdate"
@using Programming_Examination_Platform.Services
@using Task = System.Threading.Tasks.Task
@using Programming_Examination_Platform.Model
@using MudBlazor.Extensions
@inject IDialogService DialogService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject StudentService StudentService
@inject NavigationManager NavManager;
@inject ISnackbar Snackbar;

<PageTitle>Programare la Examen</PageTitle>
<MudLayout>
<MudAppBar Color="Color.Primary" Fixed="true" Elevation="0">
  <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer"/>
  <div style="padding: 10px; display: flex; align-items: center;">
    <img src="images/header.png" style="max-height: 50px; max-width: 201px;"/>
  </div>
  <MudSpacer/>
  <MudIconButton Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Inherit"/>
  <MudText Typo="Typo.h6">@userEmail</MudText>
</MudAppBar>
<MudDrawer @bind-Open="@open" Elevation="0">
  <MudNavMenu>
    <MudText Typo="Typo.h6" Class="px-4">Programming Examination Platform</MudText>
    <MudText Typo="Typo.body2" Class="px-4 mud-text-secondary">Student Account</MudText>
    <MudDivider Class="my-2"/>
    <MudNavLink Href="/indexStudent" Icon="@Icons.Material.Filled.Dashboard">Dashboard</MudNavLink>
    <MudNavLink Href="/booking/selectexam" Icon="@Icons.Material.Filled.CalendarMonth">Booking</MudNavLink>
    <MudNavLink Href="/results" Icon="@Icons.Material.Filled.LibraryAddCheck">Results</MudNavLink>
    <MudNavLink Href="/scoreboard" Icon="@Icons.Material.Filled.SupervisedUserCircle">Scoreboard</MudNavLink>
    <MudNavGroup Title="Tutorials" Icon="@Icons.Material.Filled.Settings" Expanded="true">
      <MudNavLink Href="/tutorials/javaexam" Icon="@Icons.Material.Filled.Airplay" IconColor="Color.Success">JavaExam</MudNavLink>
    </MudNavGroup>
    <MudDivider Class="my-2"/>
    <MudNavLink OnClick="OnLogoutButtonClick" Icon="@Icons.Material.Filled.Logout" IconColor="Color.Error">Log Out</MudNavLink>
  </MudNavMenu>
</MudDrawer>
<MudMainContent Class="pt-16 px-16">
    <MudContainer Class="mt-6">
        <br/><br/>
        <MudTimeline TimelineOrientation="TimelineOrientation.Horizontal" TimelinePosition="TimelinePosition.Bottom">
            <MudTimelineItem Color="Color.Success" Variant="Variant.Filled">
                <ItemContent>
                    <MudAlert Severity="Severity.Success">Select the exam</MudAlert>
                </ItemContent>
            </MudTimelineItem>
            <MudTimelineItem Color="Color.Info" Variant="Variant.Filled">
                <ItemContent>
                    <MudAlert Severity="Severity.Info">Select the exam date</MudAlert>
                </ItemContent>
            </MudTimelineItem>
            <MudTimelineItem Color="Color.Default" Variant="Variant.Filled">
                <ItemContent>
                    <MudAlert Severity="Severity.Normal">Confirm</MudAlert>
                </ItemContent>
            </MudTimelineItem>
        </MudTimeline>
        <br/><br/>
        <style>
.center
{
      margin: auto;
      width: 80%;
      padding: 20px;
}     
</style>
        <div class="center">
            <div class="center">
                <MudText Typo="Typo.h2" Align="Align.Center">Book your Exam</MudText>
                <br/><br/>
                @if (schedules != null && schedules.Any())
                {
                    @foreach (var schedule in schedules)
                    {
                        if (schedule.AvailablePlaces > 0)
                        {
                            <MudCard Elevation="5">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h5">
                                            <strong>
                                                Exam date: @schedule.Date.Value.ToString("MMMM dd yyyy") 
                                            </strong>
                                        </MudText>
                                    </CardHeaderContent>
                                    <CardHeaderActions>
                                        <MudIconButton Icon="@Icons.Material.Filled.DateRange" Size="Size.Large"/>
                                    </CardHeaderActions>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudField Label="Exam starts at:" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Timer">@schedule.Date.Value.ToString("t")</MudField>
                                    <MudField Label="Room:" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.HomeWork">@schedule.RoomName</MudField>
                                    <MudField Label="Total places:" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.EventSeat">@schedule.TotalPlaces</MudField>
                                    <MudField Label="Available places:" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AirlineSeatReclineExtra">
                                        <strong>@schedule.AvailablePlaces</strong>
                                    </MudField>
                                </MudCardContent>
                                <MudCardActions>
                                    <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.DateRange"
                                               @onclick="() => OnViewStudentsButtonClick(schedule.ExamScheduleId)">
                                        Select date
                                    </MudButton>
                                </MudCardActions>
                            </MudCard>
                            <br/><br/>
                        }
                        else
                        {
                            <MudCard Elevation="0">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h5">
                                            <strong>Not Available</strong>
                                        </MudText>
                                    </CardHeaderContent>
                                    <CardHeaderActions>
                                        <MudIconButton Icon="@Icons.Material.Filled.DateRange" Size="Size.Large"/>
                                    </CardHeaderActions>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudField Label="Exam Planned on:" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AlternateEmail">@schedule.Date.Value</MudField>
                                    <MudField Label="Room:" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.HomeWork">@schedule.RoomName</MudField>
                                    <MudField Label="Total places:" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.EventSeat">@schedule.TotalPlaces</MudField>
                                    <MudField Label="Available places:" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AirlineSeatReclineExtra">
                                        <strong>@schedule.AvailablePlaces</strong>
                                    </MudField>
                                </MudCardContent>
                            </MudCard>
                            <br/><br/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.h4">No available exams for booking for now! Try Again later!</MudText>
                }
            </div>
        </div>
    </MudContainer>
</MudMainContent>
</MudLayout>

@code {
    //         
    bool open = false;

    void ToggleDrawer()
    {
        open = !open;
    }
    private int userID;
    private int proctorID;
    private string userEmail;
    private int ExamID;
    private DateTime? selectedDate = DateTime.Now;
    private string _userRole;
   
    private List<ExamSchedule> schedules;

   
    private async Task OnViewStudentsButtonClick(int examScheduleId)
    {
        await LocalStorage.SetItemAsync("ExamScheduleId", examScheduleId);
        var selectedSchedule = schedules.FirstOrDefault(s => s.ExamScheduleId == examScheduleId);
        if (selectedSchedule != null)
        {
            await LocalStorage.SetItemAsync("dateSelected", selectedSchedule.Date.Value);
            NavManager.NavigateTo("/booking/confirm");
            Snackbar.Add("Date selected successfully!", Severity.Success);
        }
        else
        {
            Snackbar.Add("Error: Schedule not found.", Severity.Error);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        userID = await LocalStorage.GetItemAsync<int>("userID");
        var student = await StudentService.GetStudentById(userID);
        _userRole = await LocalStorage.GetItemAsync<string>("userRole");
        proctorID = student.ProctorId;
    // Check if user is a student or if no role is set.
        if (string.IsNullOrEmpty(_userRole) || _userRole == "Admin")
        {
            NavManager.NavigateTo("/loginStudent");
            return;
        }
        if (userID == -1) // or another value that represents "no ID"
        {
            NavManager.NavigateTo("/loginStudent");
            return;
        }
                userEmail = student?.Email ?? "Email not found";
                ExamID = await LocalStorage.GetItemAsync<int>("selectedExam");
                schedules = await StudentService.GetExamScheduleByProctorId(proctorID);
    }


    private async Task OnLogoutButtonClick()
    {
        await LocalStorage.SetItemAsync("userID", -1);
        NavManager.NavigateTo("/loginStudent");
    }


}